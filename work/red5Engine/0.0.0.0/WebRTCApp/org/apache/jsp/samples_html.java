/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.73
 * Generated at: 2022-04-19 08:40:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class samples_html extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<title>Ant Media Server WebRTC Publish</title>\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<link rel=\"stylesheet\" href=\"css/external/bootstrap4/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\">\n");
      out.write("\n");
      out.write("<script src=\"js/external/adapter-latest.js\"></script>\n");
      out.write("\n");
      out.write("<style>\n");
      out.write("/* Everything but the jumbotron gets side spacing for mobile first views */\n");
      out.write(".header, .marketing, .footer {\n");
      out.write("	padding: 30px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".row {\n");
      out.write("	padding-top: 15px;\n");
      out.write("	padding-bottom: 15px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* Customize container */\n");
      out.write("@media ( min-width : 768px) {\n");
      out.write("	.container {\n");
      out.write("		max-width: 730px;\n");
      out.write("	}\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* Responsive: Portrait tablets and up */\n");
      out.write("@media screen and (min-width: 768px) {\n");
      out.write("	/* Remove the padding we set earlier */\n");
      out.write("	.header, .marketing, .footer {\n");
      out.write("		padding-right: 0;\n");
      out.write("		padding-left: 0;\n");
      out.write("	}\n");
      out.write("}\n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("	<div class=\"container\">\n");
      out.write("		<div class=\"header clearfix\">\n");
      out.write("			<div class=\"row\">\n");
      out.write("				<h1 class=\"col\">WebRTC Samples</h1>\n");
      out.write("				<nav class=\"col align-self-center\">\n");
      out.write("					<ul class=\"nav float-right\">\n");
      out.write("						<li><a href=\"http://antmedia.io\">Contact</a></li>\n");
      out.write("					</ul>\n");
      out.write("				</nav>\n");
      out.write("			</div>\n");
      out.write("		</div>\n");
      out.write("			<div class=\"container\">\n");
      out.write("				<div class=\"row\">\n");
      out.write("					<div class=\"d-flex w-100\">\n");
      out.write("						<a href=\"index.html\" class=\"flex-column \"><h5 class=\"mb-1\">WebRTC Publish(Video Camera, Screen, Mic)</h5></a>\n");
      out.write("					</div>\n");
      out.write("					<p class=\"mb-1\">Broadcast Video Camera and Microphone to the Ant Media Server. It also supports Screen capturing, bandwidth limitation and data channel.\n");
      out.write("						Youc can play the stream with the sample below.\n");
      out.write("					</p>\n");
      out.write("				</div>\n");
      out.write("\n");
      out.write("				<div class=\"row\">\n");
      out.write("					<div class=\"d-flex w-100\">\n");
      out.write("						<a href=\"player.html\" class=\"flex-column \"><h5 class=\"mb-1\">WebRTC Play</h5></a>\n");
      out.write("					</div>\n");
      out.write("					<p class=\"mb-1\">Play WebRTC stream that is broadcasting to the Ant Media Server. You can play any stream(RTMP & WebRTC ingesting, Stream sources, IP Camera, etc.)</p>\n");
      out.write("				</div>\n");
      out.write("				\n");
      out.write("				<div class=\"row\">\n");
      out.write("					<div class=\"d-flex w-100\">\n");
      out.write("						<a href=\"canvas-publish.html\" class=\"flex-column \"><h5 class=\"mb-1\">WebRTC Publish with WhiteBoard</h5></a>\n");
      out.write("					</div>\n");
      out.write("					<p class=\"mb-1\">Broadcast WebRTC stream to the Ant Media Server with synchronized Whiteboard. Whiteboard is synchronized with all players. Make sure that data channel is enabled on the server side. It's disabled by default. </p>\n");
      out.write("				</div>\n");
      out.write("\n");
      out.write("				<div class=\"row\">\n");
      out.write("					<div class=\"d-flex w-100\">\n");
      out.write("						<a href=\"canvas-player.html\" class=\"flex-column \"><h5 class=\"mb-1\">WebRTC Play with WhiteBoard</h5></a>\n");
      out.write("					</div>\n");
      out.write("					<p class=\"mb-1\">Play WebRTC stream with synchronized Whiteboard. Make sure that data channel is enabled on the server side. It's disabled by default. </p>\n");
      out.write("				</div>\n");
      out.write("\n");
      out.write("				<div class=\"row\">\n");
      out.write("					<div class=\"d-flex w-100\">\n");
      out.write("						<a href=\"audio_publish.html\" class=\"flex-column \"><h5 class=\"mb-1\">WebRTC Audio Publish</h5></a>\n");
      out.write("					</div>\n");
      out.write("					<p class=\"mb-1\">Broadcast only microphone stream(no video) to the Ant Media Server.</p>\n");
      out.write("				</div>\n");
      out.write("\n");
      out.write("				<div class=\"row\">\n");
      out.write("					<div class=\"d-flex w-100\">\n");
      out.write("						<a href=\"audio_player.html\" class=\"flex-column \"><h5 class=\"mb-1\">WebRTC Audio Play</h5></a>\n");
      out.write("					</div>\n");
      out.write("					<p class=\"mb-1\">Play audio only stream that is broadcasting to the Ant Media Server</p>\n");
      out.write("				</div>\n");
      out.write("\n");
      out.write("				<div class=\"row\">\n");
      out.write("					<div class=\"d-flex w-100\">\n");
      out.write("						<a href=\"datachannel.html\" class=\"flex-column \"><h5 class=\"mb-1\">WebRTC Data Channel</h5></a>\n");
      out.write("					</div>\n");
      out.write("					<p class=\"mb-1\">Send only data through WebRTC via Ant Media Server no video or audio. It works the same way with WebRTC Publish and Play which means all data is delivered to subscribers</p>\n");
      out.write("				</div>\n");
      out.write("				\n");
      out.write("				<div class=\"row\">\n");
      out.write("					<div class=\"d-flex w-100\">\n");
      out.write("						<a href=\"conference.html\" class=\"flex-column \"><h5 class=\"mb-1\">WebRTC Conference</h5></a>\n");
      out.write("					</div>\n");
      out.write("					<p class=\"mb-1\">Reference WebRTC conference implementation</p>\n");
      out.write("				</div>\n");
      out.write("\n");
      out.write("				<div class=\"row\">\n");
      out.write("					<div class=\"d-flex w-100\">\n");
      out.write("						<a href=\"merge_streams.html\" class=\"flex-column \"><h5 class=\"mb-1\">Merge WebRTC Conference Streams</h5></a>\n");
      out.write("					</div>\n");
      out.write("					<p class=\"mb-1\">Connect a WebRTC Conference Room, get all streams & merge them into a canvas & republish to the Ant Media Server.\n");
      out.write("						This solution is great if you want to publish conferece room to large number of audience in a single stream. \n");
      out.write("					</p>\n");
      out.write("				</div>\n");
      out.write("				\n");
      out.write("				<div class=\"row\">\n");
      out.write("					<div class=\"d-flex w-100\">\n");
      out.write("						<a href=\"publish_with_timestamp.html\" class=\"flex-column \"><h5 class=\"mb-1\">WebRTC Publish with Timestamp</h5></a>\n");
      out.write("					</div>\n");
      out.write("					<p class=\"mb-1\">Broadcast WebRTC camera stream by drawing current timestamp of the frame. It's used for measuring the E2E(End to End) latency.</p>\n");
      out.write("				</div>\n");
      out.write("\n");
      out.write("				<div class=\"row\">\n");
      out.write("					<div class=\"d-flex w-100\">\n");
      out.write("						<a href=\"player_with_timestamp.html\" class=\"flex-column \"><h5 class=\"mb-1\">WebRTC Player with Timestamp</h5></a>\n");
      out.write("					</div>\n");
      out.write("					<p class=\"mb-1\">Play WebRTC stream by drawing current timestamp of the frame. It's used for measuring the E2E latency.</p>\n");
      out.write("				</div>\n");
      out.write("\n");
      out.write("				<div class=\"row\">\n");
      out.write("					<div class=\"d-flex w-100\">\n");
      out.write("						<a href=\"peer.html\" class=\"flex-column \"><h5 class=\"mb-1\">WebRTC Peer to Peer</h5></a>\n");
      out.write("					</div>\n");
      out.write("					<p class=\"mb-1\">Connect two peers directly. Ant Media Server is only a signalling server to establish the connection. Video and Audio is not relayed through Ant Media Server</p>\n");
      out.write("				</div>\n");
      out.write("\n");
      out.write("				<div class=\"row\">\n");
      out.write("					<div class=\"d-flex w-100\">\n");
      out.write("						<a href=\"webrtc-test-tool.html\" class=\"flex-column \"><h5 class=\"mb-1\">WebRTC Test Tool</h5></a>\n");
      out.write("					</div>\n");
      out.write("					<p class=\"mb-1\">Measure E2E(End to end) bitrate, RTT, packet lost, etc.</p>\n");
      out.write("				</div>\n");
      out.write("\n");
      out.write("				<div class=\"row\">\n");
      out.write("					<div class=\"d-flex w-100\">\n");
      out.write("						<a href=\"play.html?id=stream1\" class=\"flex-column \"><h5 class=\"mb-1\">Embedded Player</h5></a>\n");
      out.write("					</div>\n");
      out.write("					<p class=\"mb-1\">Play WebRTC/HLS/DASH/VoD/360 streams. Following parameters can be given as URL query\n");
      out.write("						<ul style=\"font-family: 'Courier New', Courier, monospace;\">\n");
      out.write("						\n");
      out.write("						  <li> \"id\": The stream id to play. It is mandatory\n");
      out.write("						  <li> \"token\": The token to play stream. It's not mandatory if token security is disabled.\n");
      out.write("						  <li> \"autoplay\": To start playing automatically if streams is available. Optional. Default value is true\n");
      out.write("						  <li> \"mute\": To start playing with mute if streams is available. Optional. Default value is true\n");
      out.write("						  <li> \"playOrder\": The order which technologies is used in playing. Optional. Default value is \"webrtc,hls\".\n");
      out.write("						    Possible values are \"hls,webrtc\",\"webrtc\",\"hls\",\"vod\",\"dash\"\n");
      out.write("						  <li> \"playType\": the order which play type is used in playing for VoD streams. Optional. Default value is \"mp4,webm\".\n");
      out.write("						     Possible values are \"webm,mp4\"\",\"mp4\",\"webm\"\n");
      out.write("						   <li>\"is360\": To play the stream in 360. Default value is false. \n");
      out.write("						   \n");
      out.write("						</ul>\n");
      out.write("						Sample: &nbsp;  <p style=\"font-family: 'Courier New', Courier, monospace;\"> play.html?id=stream1&autoplay=true&playOrder=webrtc</p>\n");
      out.write("					</p>\n");
      out.write("				</div>\n");
      out.write("\n");
      out.write("				\n");
      out.write("			</div>	\n");
      out.write("		<footer class=\"footer text-center\">\n");
      out.write("			<p><a href=\"http://antmedia.io\">Ant Media Server</a></p>\n");
      out.write("		</footer>\n");
      out.write("	</div>\n");
      out.write("</body>\n");
      out.write("\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
