/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.73
 * Generated at: 2022-05-22 15:02:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class play_html extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("\n");
      out.write("<head>\n");
      out.write("	<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("	<title>Ant Media Server WebRTC/HLS Player</title>\n");
      out.write("\n");
      out.write("	<script src=\"js/external/aframe.min.js\"></script>\n");
      out.write("	<script src=\"js/external/hls.js\"></script>\n");
      out.write("\n");
      out.write("	<!-- videojs includes  -->\n");
      out.write("	<link href=\"css/external/video-js.css\" rel=\"stylesheet\">\n");
      out.write("	<script src=\"js/external/video.js\"></script>\n");
      out.write("	<!--  end of video js includes  -->\n");
      out.write("\n");
      out.write("	<script src=\"js/fetch.js\"></script>\n");
      out.write("	<script src=\"js/promise.min.js\"></script>\n");
      out.write("	<script src=\"js/external/adapter-latest.js\"></script>\n");
      out.write("	<script src=\"js/external/dash.all.min.js\"></script>\n");
      out.write("\n");
      out.write("	<link href=\"css/player.css\" rel=\"stylesheet\">\n");
      out.write("\n");
      out.write("</head>\n");
      out.write("\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("	<div id='video-overlay'>\n");
      out.write("		<img src=\"images/loading.gif\" />\n");
      out.write("	</div>\n");
      out.write("\n");
      out.write("	<div id=\"video_info\">\n");
      out.write("		Stream will start playing automatically<br />when it is live\n");
      out.write("	</div>\n");
      out.write("\n");
      out.write("	<!-- HLS Player -->\n");
      out.write("	<div id=\"video_container\">\n");
      out.write("		<video id=\"video-player\" class=\"video-js vjs-default-skin vjs-big-play-centered\" controls preload=\"auto\"\n");
      out.write("					 data-setup='{\"liveui\": true, \"liveTracker\": {\n");
      out.write("								\"trackingThreshold\":0\n");
      out.write("								 }}' >\n");
      out.write("			<p class=\"vjs-no-js\">\n");
      out.write("				To view this video please enable JavaScript, and consider upgrading\n");
      out.write("				to a web browser that <a href=\"http://videojs.com/html5-video-support/\" target=\"_blank\">supports\n");
      out.write("					HTML5 video</a>\n");
      out.write("			</p>\n");
      out.write("		</video>\n");
      out.write("	</div>\n");
      out.write("\n");
      out.write("	<!-- WebRTC Player -->\n");
      out.write("\n");
      out.write("	<video id=\"remoteVideo\" controls playsinline></video>\n");
      out.write("\n");
      out.write("	<!-- 360 player -->\n");
      out.write("	<a-scene style=\"display:none\">\n");
      out.write("		<a-videosphere src=\"#remoteVideo\" rotation=\"0 180 0\" style=\"background-color: antiquewhite\"></a-videosphere>\n");
      out.write("	</a-scene>\n");
      out.write("\n");
      out.write("	<div id=\"networkWarning\">Your connection isn't fast enough to play this stream!</div>\n");
      out.write("	<img id=\"play_button\" src=\"images/play.png\" onclick=\"playWebRTCVideo()\"\n");
      out.write("		style=\"position: absolute; top: 30px; left: 30px; display: none;\" />\n");
      out.write("\n");
      out.write("\n");
      out.write("	<!-- Mute/Unmute Video Button -->\n");
      out.write("	<button onclick=\"changeVideoMuteStatus()\" id=\"unmuteButton\" title=\"Mute/Unmute Video\">\n");
      out.write("		Unmute\n");
      out.write("	</button>\n");
      out.write("\n");
      out.write("\n");
      out.write("	<script type=\"module\">\n");
      out.write("		/**\n");
      out.write("		* This page accepts following arguments. \n");
      out.write("		* 1. \"id\": the stream id to play.It is mandatory\n");
      out.write("		* 2. \"token\": the token to play stream. It's mandatory if token security is enabled on server side.\n");
      out.write("		* 3. \"autoplay\": To start playing automatically if streams is available. Optional. Default value is true\n");
      out.write("		* 4. \"mute\": To start playing with mute if streams is available. Optional. Default value is true\n");
      out.write("		* 5. \"playOrder\": the order which technologies is used in playing. Optional. Default value is \"webrtc,hls\".\n");
      out.write("		*     possible values are \"hls,webrtc\",\"webrtc\",\"hls\",\"vod\",\"dash\"\n");
      out.write("		* 6. \"playType\": the order which play type is used in playing. Optional. Default value is \"mp4,webm\".\n");
      out.write("		*     possible values are \"webm,mp4\"\",\"mp4\",\"webm\",\"mov\"\n");
      out.write("		* 7. \"targetLatency\": To define target latency for the DASH player. Optional. Default value is 3.\n");
      out.write("		* 8. \"is360\": To play the stream in 360. Default value is false. \n");
      out.write("		*/\n");
      out.write("\n");
      out.write("		import { WebRTCAdaptor } from \"./js/webrtc_adaptor.js\"\n");
      out.write("		import { getUrlParameter, isMobile, tryToPlay, tryToVODPlay } from \"./js/fetch.stream.js\";\n");
      out.write("\n");
      out.write("		//The play order, player tries to play according to this order, if it can not play then tries following format\n");
      out.write("		var playOrder = getUrlParameter(\"playOrder\");\n");
      out.write("		if (playOrder == null) {\n");
      out.write("			playOrder = [\"webrtc\", \"hls\"];\n");
      out.write("		}\n");
      out.write("		else {\n");
      out.write("			playOrder = playOrder.split(',');\n");
      out.write("		}\n");
      out.write("\n");
      out.write("		var streamId = getUrlParameter(\"id\");\n");
      out.write("		if (streamId == null) {\n");
      out.write("			//check name variable for compatibility with older versions\n");
      out.write("			streamId = getUrlParameter(\"name\");\n");
      out.write("		}\n");
      out.write("\n");
      out.write("		var playType = getUrlParameter(\"playType\");\n");
      out.write("		if (playType == null || playType == \"mp4,webm\") {\n");
      out.write("			playType = [\"mp4\", \"webm\"];\n");
      out.write("		}\n");
      out.write("		else if (playType == \"webm,mp4\") {\n");
      out.write("			playType = [\"webm\", \"mp4\"];\n");
      out.write("		}\n");
      out.write("		else if (playType == \"mp4\") {\n");
      out.write("			playType = [\"mp4\"];\n");
      out.write("		}\n");
      out.write("		else if (playType == \"webm\") {\n");
      out.write("			playType = [\"webm\"];\n");
      out.write("		}\n");
      out.write("		else if (playType == \"mov\") {\n");
      out.write("			playType = [\"mov\"];\n");
      out.write("		}\n");
      out.write("\n");
      out.write("		var token = getUrlParameter(\"token\");\n");
      out.write("		var pAutoplay = getUrlParameter(\"autoplay\");\n");
      out.write("		var autoPlay = true;\n");
      out.write("		if (pAutoplay == \"false\" || isMobile()) {\n");
      out.write("			autoPlay = false;\n");
      out.write("		}\n");
      out.write("		var mute = getUrlParameter(\"mute\");\n");
      out.write("		if (mute == \"true\" || mute == null) {\n");
      out.write("			mute = true;\n");
      out.write("		}\n");
      out.write("		else {\n");
      out.write("			mute = false;\n");
      out.write("		}\n");
      out.write("\n");
      out.write("		var targetLatency = getUrlParameter(\"targetLatency\");\n");
      out.write("		if (targetLatency == \"null\") {\n");
      out.write("			targetLatency = 3;\n");
      out.write("		}\n");
      out.write("\n");
      out.write("		var hlsExtension = \"m3u8\";\n");
      out.write("		var dashExtension = \"mpd\";\n");
      out.write("		var subscriberId = getUrlParameter(\"subscriberId\");\n");
      out.write("		var subscriberCode = getUrlParameter(\"subscriberCode\");\n");
      out.write("		var is360 = getUrlParameter(\"is360\");\n");
      out.write("\n");
      out.write("		if (is360 == \"true\") {\n");
      out.write("			is360 = true;\n");
      out.write("		}\n");
      out.write("		else {\n");
      out.write("			is360 = false;\n");
      out.write("		}\n");
      out.write("\n");
      out.write("		var unMuteButton = document.getElementById(\"unmuteButton\");\n");
      out.write("		var placeHolder = document.getElementById(\"video_info\");\n");
      out.write("		var player = document.getElementById(\"remoteVideo\");\n");
      out.write("		\n");
      out.write("		var iceConnected = false;\n");
      out.write("\n");
      out.write("\n");
      out.write("		//This function creates a-scene elements only if is360 parameter is true.\n");
      out.write("		//This makes a-scene doesn't run in the background if it is not needed.\n");
      out.write("		function createVrVideo() {\n");
      out.write("			var vrScene = document.createElement(\"a-scene\");\n");
      out.write("			vrScene.style.display=\"none\";\n");
      out.write("			vrScene.innerHTML = '<a-videosphere src=\"#remoteVideo\" rotation=\"0 180 0\" style=\"background-color: antiquewhite\"></a-videosphere>';\n");
      out.write("			var remoteVideoNode = document.getElementById(\"remoteVideo\");\n");
      out.write("			remoteVideoNode.parentNode.insertBefore(vrScene,remoteVideoNode.nextSibling);\n");
      out.write("		}\n");
      out.write("\n");
      out.write("		// This function mutes or unmutes the 360 video stream.\n");
      out.write("		// This is necessary because the browser doesn't allow videos to be played automatically and unmuted by default.\n");
      out.write("		// Exceptions are possible: https://developers.google.com/web/updates/2017/09/autoplay-policy-changes\n");
      out.write("		function changeVideoMuteStatus() {\n");
      out.write("			// Checks the current \"mute\" status of the video\n");
      out.write("			if (player.muted) {\n");
      out.write("				// Unmute the video and change the button's text\n");
      out.write("				player.muted = false;\n");
      out.write("				document.getElementById(\"unmuteButton\").innerText = \"Mute\";\n");
      out.write("			}\n");
      out.write("			else {\n");
      out.write("				player.muted = true;\n");
      out.write("				document.getElementById(\"unmuteButton\").innerText = \"Unmute\";\n");
      out.write("			}\n");
      out.write("		}\n");
      out.write("\n");
      out.write("		var webRTCAdaptor = null;\n");
      out.write("		var streamsFolder = \"streams\";\n");
      out.write("\n");
      out.write("		function genericCallback(currentTech) {\n");
      out.write("\n");
      out.write("			placeHolder.innerHTML = \"Stream will start playing automatically<br/>when it is live\";\n");
      out.write("			setTimeout(function () {\n");
      out.write("				var index = playOrder.indexOf(currentTech);\n");
      out.write("				\n");
      out.write("				if(currentTech == \"webrtc\"){\n");
      out.write("					if(!iceConnected){\n");
      out.write("						if (index == -1 || index == (playOrder.length - 1)) {\n");
      out.write("							index = 0;\n");
      out.write("						}\n");
      out.write("						else {\n");
      out.write("							index++;\n");
      out.write("						}\n");
      out.write("					}\n");
      out.write("				}\n");
      out.write("				else{\n");
      out.write("					if (index == -1 || index == (playOrder.length - 1)) {\n");
      out.write("						index = 0;\n");
      out.write("					}\n");
      out.write("					else {\n");
      out.write("						index++;\n");
      out.write("					}\n");
      out.write("				}\n");
      out.write("\n");
      out.write("				var tech = playOrder[index];\n");
      out.write("\n");
      out.write("				if (tech == \"webrtc\") {\n");
      out.write("					// It means there is no HLS stream, so try to play WebRTC stream\n");
      out.write("					if (webRTCAdaptor == null) {\n");
      out.write("						initializeWebRTCPlayer(streamId, token, webrtcNoStreamCallback);\n");
      out.write("					}\n");
      out.write("					else {\n");
      out.write("						webRTCAdaptor.getStreamInfo(streamId);\n");
      out.write("					}\n");
      out.write("				}\n");
      out.write("				else if (tech == \"hls\") {\n");
      out.write("					tryToPlay(streamId, token, hlsExtension, subscriberId, subscriberCode, hlsNoStreamCallback);\n");
      out.write("				}\n");
      out.write("				else if (tech == \"dash\") {\n");
      out.write("					var dashFile = streamId + \"/\" + streamId;\n");
      out.write("					tryToPlay(dashFile, token, dashExtension, subscriberId, subscriberCode, dashNoStreamCallback);\n");
      out.write("				}\n");
      out.write("			}, 3000);\n");
      out.write("		}\n");
      out.write("\n");
      out.write("		function webrtcNoStreamCallback() {\n");
      out.write("			/**\n");
      out.write("		 * If HLS is in the play order then try to play HLS, if not wait for WebRTC stream\n");
      out.write("		 * In some cases user may want to remove HLS from the order and force to play WebRTC only\n");
      out.write("		 * in these cases player only waits for WebRTC streams\n");
      out.write("		 */\n");
      out.write("			genericCallback(\"webrtc\");\n");
      out.write("		}\n");
      out.write("\n");
      out.write("		function hlsNoStreamCallback() {\n");
      out.write("			genericCallback(\"hls\");\n");
      out.write("		}\n");
      out.write("\n");
      out.write("		function vodNoStreamCallback() {\n");
      out.write("			placeHolder.innerHTML = \"Stream will start playing automatically<br/>when it is live\";\n");
      out.write("			setTimeout(function () {\n");
      out.write("				if (playOrder.includes(\"vod\")) {\n");
      out.write("					tryToVODPlay(streamId, token, subscriberId, subscriberCode, vodNoStreamCallback, playType);\n");
      out.write("				}\n");
      out.write("			}, 3000);\n");
      out.write("\n");
      out.write("		}\n");
      out.write("\n");
      out.write("		function dashNoStreamCallback() {\n");
      out.write("			genericCallback(\"dash\");\n");
      out.write("		}\n");
      out.write("\n");
      out.write("		function setHLSElementsVisibility(show) {\n");
      out.write("			document.getElementById(\"video_container\").style.display = show == true ? \"block\" : \"none\";\n");
      out.write("		}\n");
      out.write("\n");
      out.write("		function hideWebRTCElements() {\n");
      out.write("			setWebRTCElementsVisibility(false);\n");
      out.write("			document.getElementById(\"play_button\").style.display = \"none\";\n");
      out.write("		}\n");
      out.write("\n");
      out.write("		function setWebRTCElementsVisibility(show) {\n");
      out.write("			document.getElementById(\"remoteVideo\").style.display = show == true ? \"block\" : \"none\";\n");
      out.write("		}\n");
      out.write("\n");
      out.write("		function setPlaceHolderVisibility(show) {\n");
      out.write("			placeHolder.style.display = show == true ? \"block\" : \"none\";\n");
      out.write("		}\n");
      out.write("\n");
      out.write("		function show360ElementsVisibility() {\n");
      out.write("			unMuteButton.style.display = \"block\";\n");
      out.write("			document.querySelector('a-scene').style.display = \"block\";\n");
      out.write("		}\n");
      out.write("\n");
      out.write("		function hide360ElementsVisibility() {\n");
      out.write("			document.querySelector('a-scene').style.display = \"none\";\n");
      out.write("		}\n");
      out.write("\n");
      out.write("		function playWebRTCVideo() {\n");
      out.write("			setWebRTCElementsVisibility(true);\n");
      out.write("\n");
      out.write("			if (is360) {\n");
      out.write("				unMuteButton.style.display = \"block\";\n");
      out.write("			}\n");
      out.write("\n");
      out.write("			if (mute) {\n");
      out.write("				document.getElementById(\"remoteVideo\").muted = true;\n");
      out.write("				unMuteButton.innerText = \"Unmute\";\n");
      out.write("			}\n");
      out.write("			else {\n");
      out.write("				document.getElementById(\"remoteVideo\").muted = false;\n");
      out.write("				unMuteButton.innerText = \"Mute\";\n");
      out.write("			}\n");
      out.write("			if (autoPlay) {\n");
      out.write("				document.getElementById(\"remoteVideo\").play().then(function (value) {\n");
      out.write("					//autoplay started\n");
      out.write("					document.getElementById(\"play_button\").style.display = \"none\";\n");
      out.write("\n");
      out.write("				}).catch(function (error) {\n");
      out.write("					document.getElementById(\"play_button\").style.display = \"block\";\n");
      out.write("					console.log(\"User interaction needed to start playing\");\n");
      out.write("				});\n");
      out.write("			}\n");
      out.write("		}\n");
      out.write("\n");
      out.write("\n");
      out.write("		function initializePlayer(streamId, extension, token, subscriberId, subscriberCode) {\n");
      out.write("			hideWebRTCElements();\n");
      out.write("			startPlayer(streamId, extension, token, subscriberId, subscriberCode)\n");
      out.write("		}\n");
      out.write("\n");
      out.write("		window.initializePlayer = initializePlayer\n");
      out.write("		window.playWebRTCVideo = playWebRTCVideo\n");
      out.write("		window.changeVideoMuteStatus = changeVideoMuteStatus\n");
      out.write("\n");
      out.write("		function startPlayer(streamId, extension, token, subscriberId, subscriberCode) {\n");
      out.write("\n");
      out.write("			var type;\n");
      out.write("			var liveStream = false;\n");
      out.write("			if (extension == \"mp4\") {\n");
      out.write("				type = \"video/mp4\";\n");
      out.write("				liveStream = false;\n");
      out.write("			}\n");
      out.write("			else if (extension == \"webm\") {\n");
      out.write("				type = \"video/webm\";\n");
      out.write("				liveStream = false;\n");
      out.write("			}\n");
      out.write("			else if (extension == \"mov\") {\n");
      out.write("				type = \"video/mp4\";\n");
      out.write("				alert(\"Browsers do not support to play mov format\");\n");
      out.write("				liveStream = false;\n");
      out.write("			}\n");
      out.write("			else if (extension == \"avi\") {\n");
      out.write("				type = \"video/mp4\";\n");
      out.write("				alert(\"Browsers do not support to play avi format\");\n");
      out.write("				liveStream = false;\n");
      out.write("			}\n");
      out.write("			else if (extension == \"m3u8\") {\n");
      out.write("				type = \"application/x-mpegURL\";\n");
      out.write("				liveStream = true;\n");
      out.write("			}\n");
      out.write("			else if (extension == \"mpd\") {\n");
      out.write("				type = \"application/dash+xml\";\n");
      out.write("				liveStream = true;\n");
      out.write("			}\n");
      out.write("			else {\n");
      out.write("				console.log(\"Unknown extension: \" + extension);\n");
      out.write("				return;\n");
      out.write("			}\n");
      out.write("\n");
      out.write("			var preview = streamId;\n");
      out.write("			if (streamId.endsWith(\"_adaptive\")) {\n");
      out.write("				preview = streamId.substring(0, streamId.indexOf(\"_adaptive\"));\n");
      out.write("			}\n");
      out.write("\n");
      out.write("			var player = document.getElementById('remoteVideo');\n");
      out.write("\n");
      out.write("			if (!is360) {\n");
      out.write("				// If it's not dash, play with videojs\n");
      out.write("				if (extension != dashExtension) {\n");
      out.write("\n");
      out.write("					player = videojs('video-player', {\n");
      out.write("						poster: \"previews/\" + preview + \".png\"\n");
      out.write("					});\n");
      out.write("\n");
      out.write("					videojs.Hls.xhr.beforeRequest = function (options) {\n");
      out.write("						options.uri = options.uri + \"?token=\" + token + \"&subscriberId=\" + subscriberId + \"&subscriberCode=\" + subscriberCode;\n");
      out.write("						return options;\n");
      out.write("					};\n");
      out.write("\n");
      out.write("					if( token != null || typeof token != \"undefined\"){\n");
      out.write("						player.src({\n");
      out.write("						src: \"streams/\" + streamId + \".\" + extension + \"?token=\" + token,\n");
      out.write("						type: type,\n");
      out.write("						withCredentials: true,\n");
      out.write("\n");
      out.write("						});\n");
      out.write("					}\n");
      out.write("					else{\n");
      out.write("						player.src({\n");
      out.write("						src: \"streams/\" + streamId + \".\" + extension,\n");
      out.write("						type: type,\n");
      out.write("						withCredentials: true,\n");
      out.write("\n");
      out.write("						});\n");
      out.write("					}\n");
      out.write("					\n");
      out.write("					player.poster(\"previews/\" + preview + \".png\");\n");
      out.write("\n");
      out.write("					if (mute) {\n");
      out.write("						player.muted(true);\n");
      out.write("					}\n");
      out.write("					else {\n");
      out.write("						player.muted(false);\n");
      out.write("					}\n");
      out.write("\n");
      out.write("					if (autoPlay) {\n");
      out.write("						player.ready(function () {\n");
      out.write("							player.play();\n");
      out.write("						});\n");
      out.write("					}\n");
      out.write("				}\n");
      out.write("				else {\n");
      out.write("					player = dashjs.MediaPlayer().create();\n");
      out.write("\n");
      out.write("					player.updateSettings({ 'streaming': { 'lowLatencyEnabled': true } });\n");
      out.write("\n");
      out.write("					player.updateSettings({\n");
      out.write("						'streaming': {\n");
      out.write("							'liveDelay': targetLatency,\n");
      out.write("							'liveCatchUpMinDrift': 0.05,\n");
      out.write("							'liveCatchUpPlaybackRate': 0.5,\n");
      out.write("							\"liveCatchupLatencyThreshold\": 30,\n");
      out.write("						}\n");
      out.write("					});\n");
      out.write("\n");
      out.write("					player.initialize(document.querySelector(\"#video-player\"), \"streams/\" + streamId + \".\" + extension + \"?token=\" + token, false);\n");
      out.write("\n");
      out.write("					if (mute) {\n");
      out.write("						player.setMute(true);\n");
      out.write("					}\n");
      out.write("					else {\n");
      out.write("						player.setMute(false);\n");
      out.write("					}\n");
      out.write("\n");
      out.write("					if (autoPlay && player.isReady()) {\n");
      out.write("						player.play();\n");
      out.write("					}\n");
      out.write("\n");
      out.write("					setInterval(function () {\n");
      out.write("						console.log(\"live latency: \" + player.getCurrentLiveLatency());\n");
      out.write("					}, 2000);\n");
      out.write("				}\n");
      out.write("			}\n");
      out.write("			else {\n");
      out.write("				show360ElementsVisibility();\n");
      out.write("				if (extension == hlsExtension) {\n");
      out.write("\n");
      out.write("					// We need to call again due to creating 360 video elements\n");
      out.write("					player = document.getElementById('remoteVideo');\n");
      out.write("\n");
      out.write("					if (mute) {\n");
      out.write("						player.muted = true;\n");
      out.write("					}\n");
      out.write("					else {\n");
      out.write("						player.muted = false;\n");
      out.write("					}\n");
      out.write("\n");
      out.write("					var hls = new Hls({\n");
      out.write("						debug: false\n");
      out.write("					});\n");
      out.write("\n");
      out.write("					hls.loadSource(\"streams/\" + streamId + \".\" + extension + \"?token=\" + token + \"&subscriberId=\" + subscriberId + \"&subscriberCode=\" + subscriberCode);\n");
      out.write("					hls.attachMedia(player);\n");
      out.write("					hls.on(Hls.Events.MEDIA_ATTACHED, function () {\n");
      out.write("						player.play();\n");
      out.write("					});\n");
      out.write("\n");
      out.write("					hls.on(Hls.Events.ERROR, function (event, data) {\n");
      out.write("						if (data.fatal) {\n");
      out.write("							console.log(\"There is an error with chunks\");\n");
      out.write("							hide360ElementsVisibility();\n");
      out.write("							tryToPlay(streamId, token, extension, subscriberId, subscriberCode, hlsNoStreamCallback);\n");
      out.write("						}\n");
      out.write("					});\n");
      out.write("				}\n");
      out.write("				else {\n");
      out.write("					// We need to call again due to creating 360 video elements\n");
      out.write("					player = document.getElementById('remoteVideo');\n");
      out.write("\n");
      out.write("					player.src = \"streams/\" + streamId + \".\" + extension + \"?token=\" + token + \"&subscriberId=\" + subscriberId + \"&subscriberCode=\" + subscriberCode;\n");
      out.write("\n");
      out.write("					if (mute) {\n");
      out.write("						player.muted = true;\n");
      out.write("					}\n");
      out.write("					else {\n");
      out.write("						player.muted = false;\n");
      out.write("					}\n");
      out.write("\n");
      out.write("					if (autoPlay) {\n");
      out.write("						player.play();\n");
      out.write("					}\n");
      out.write("				}\n");
      out.write("\n");
      out.write("				if (autoPlay) {\n");
      out.write("					document.getElementById(\"remoteVideo\").play().then(function (value) {\n");
      out.write("						//autoplay started\n");
      out.write("						document.getElementById(\"play_button\").style.display = \"none\";\n");
      out.write("						unMuteButton.innerText = \"Unmute\";\n");
      out.write("					}).catch(function (error) {\n");
      out.write("						unMuteButton.innerText = \"Mute\";\n");
      out.write("						document.getElementById(\"play_button\").style.display = \"block\";\n");
      out.write("						console.log(\"User interaction needed to start playing\");\n");
      out.write("					});\n");
      out.write("				}\n");
      out.write("			}\n");
      out.write("\n");
      out.write("\n");
      out.write("			if (!is360) {\n");
      out.write("				setHLSElementsVisibility(true);\n");
      out.write("				setWebRTCElementsVisibility(false);\n");
      out.write("				if (typeof player.ready != \"undefined\") {\n");
      out.write("					player.ready(function () {\n");
      out.write("						var player = this;\n");
      out.write("						player.on('ended', function () {\n");
      out.write("							console.log(\"is360: \" + is360 + \" Playing has been finished\");\n");
      out.write("							hideWebRTCElements();\n");
      out.write("							setHLSElementsVisibility(false);\n");
      out.write("							setPlaceHolderVisibility(true);\n");
      out.write("							tryToPlay(streamId, token, extension, subscriberId, subscriberCode, hlsNoStreamCallback);\n");
      out.write("						});\n");
      out.write("					});\n");
      out.write("				}\n");
      out.write("				\n");
      out.write("			}\n");
      out.write("			else if (is360) {\n");
      out.write("				setHLSElementsVisibility(false);\n");
      out.write("				player.addEventListener(\"ended\", (e) => {\n");
      out.write("					console.log(\"is360: \" + is360 + \" Playing has been finished\");\n");
      out.write("					hideWebRTCElements();\n");
      out.write("					setHLSElementsVisibility(false);\n");
      out.write("					setPlaceHolderVisibility(true);\n");
      out.write("					tryToPlay(streamId, token, extension, subscriberId, subscriberCode, hlsNoStreamCallback);\n");
      out.write("				});\n");
      out.write("				setWebRTCElementsVisibility(true);\n");
      out.write("			}\n");
      out.write("			else {\n");
      out.write("				console.log(\"player ready is not available. List playing may not be continous\");\n");
      out.write("			}\n");
      out.write("			setPlaceHolderVisibility(false);\n");
      out.write("		}\n");
      out.write("\n");
      out.write("\n");
      out.write("		function initializeWebRTCPlayer(streamId, token, subscriberId, subscriberCode, noStreamCallback) {\n");
      out.write("\n");
      out.write("			if (is360) {\n");
      out.write("				show360ElementsVisibility();\n");
      out.write("			}\n");
      out.write("			setHLSElementsVisibility(false);\n");
      out.write("\n");
      out.write("			var pc_config = {\n");
      out.write("				'iceServers': [{\n");
      out.write("					'urls': 'stun:stun1.l.google.com:19302'\n");
      out.write("				}]\n");
      out.write("			};\n");
      out.write("\n");
      out.write("\n");
      out.write("			var sdpConstraints = {\n");
      out.write("				OfferToReceiveAudio: true,\n");
      out.write("				OfferToReceiveVideo: true\n");
      out.write("\n");
      out.write("			};\n");
      out.write("			var mediaConstraints = {\n");
      out.write("				video: false,\n");
      out.write("				audio: false\n");
      out.write("			};\n");
      out.write("\n");
      out.write("			var appName = location.pathname.substring(0, location.pathname.lastIndexOf(\"/\") + 1);\n");
      out.write("			var path = location.hostname + \":\" + location.port + appName + \"websocket\";\n");
      out.write("			var websocketURL = \"ws://\" + path;\n");
      out.write("		\n");
      out.write("\n");
      out.write("			if (location.protocol.startsWith(\"https\")) {\n");
      out.write("				websocketURL = \"wss://\" + path;\n");
      out.write("			}\n");
      out.write("\n");
      out.write("			iceConnected = false;\n");
      out.write("\n");
      out.write("			//webRTCAdaptor is a global variable\n");
      out.write("			webRTCAdaptor = new WebRTCAdaptor({\n");
      out.write("				websocket_url: websocketURL,\n");
      out.write("				mediaConstraints: mediaConstraints,\n");
      out.write("				peerconnection_config: pc_config,\n");
      out.write("				sdp_constraints: sdpConstraints,\n");
      out.write("				remoteVideoId: \"remoteVideo\",\n");
      out.write("				isPlayMode: true,\n");
      out.write("				debug: true,\n");
      out.write("				callback: function (info, description) {\n");
      out.write("					if (info == \"initialized\") {\n");
      out.write("						console.log(\"initialized\");\n");
      out.write("						iceConnected = false;\n");
      out.write("						webRTCAdaptor.getStreamInfo(streamId);\n");
      out.write("					}\n");
      out.write("					else if (info == \"streamInformation\") {\n");
      out.write("						console.log(\"stream information\");\n");
      out.write("						webRTCAdaptor.play(streamId, token, subscriberId, subscriberCode);\n");
      out.write("					}\n");
      out.write("					else if (info == \"play_started\") {\n");
      out.write("						//joined the stream\n");
      out.write("						console.log(\"play started\");\n");
      out.write("						setPlaceHolderVisibility(false);\n");
      out.write("						setHLSElementsVisibility(false);\n");
      out.write("						playWebRTCVideo();\n");
      out.write("					} else if (info == \"play_finished\") {\n");
      out.write("						//leaved the stream\n");
      out.write("						console.log(\"play finished\");\n");
      out.write("						setHLSElementsVisibility(false);\n");
      out.write("						hideWebRTCElements();\n");
      out.write("						setPlaceHolderVisibility(true);\n");
      out.write("						//if play_finished event is received, it has two meanings\n");
      out.write("						//1. stream is really finished \n");
      out.write("						//2. ice connection cannot be established and server reports play_finished event\n");
      out.write("						//check that publish may start again\n");
      out.write("						if (iceConnected) \n");
      out.write("						{\n");
      out.write("							//webrtc connection was successful and try to play again with webrtc\n");
      out.write("							setTimeout(function () {\n");
      out.write("								webRTCAdaptor.getStreamInfo(streamId);\n");
      out.write("							}, 3000);\n");
      out.write("						}\n");
      out.write("						else {\n");
      out.write("							//webrtc connection was not succesfull, switch the next play type(playOrder) if available \n");
      out.write("							if (typeof noStreamCallback != \"undefined\") {\n");
      out.write("								noStreamCallback();\n");
      out.write("							}\n");
      out.write("						}\n");
      out.write("					}\n");
      out.write("					else if (info == \"closed\") {\n");
      out.write("						//console.log(\"Connection closed\");\n");
      out.write("						if (typeof description != \"undefined\") {\n");
      out.write("							console.log(\"Connecton closed: \" + JSON.stringify(description));\n");
      out.write("						}\n");
      out.write("					}\n");
      out.write("					else if (info == \"bitrateMeasurement\") {\n");
      out.write("\n");
      out.write("						if (!document.getElementById(\"remoteVideo\").paused) {\n");
      out.write("							document.getElementById(\"play_button\").style.display = \"none\";\n");
      out.write("						}\n");
      out.write("\n");
      out.write("						console.debug(description);\n");
      out.write("						if (description.audioBitrate + description.videoBitrate > description.targetBitrate) {\n");
      out.write("							document.getElementById(\"networkWarning\").style.display = \"block\";\n");
      out.write("							setTimeout(function () {\n");
      out.write("								document.getElementById(\"networkWarning\").style.display = \"none\";\n");
      out.write("							}, 3000);\n");
      out.write("						}\n");
      out.write("					}\n");
      out.write("					else if (info == \"ice_connection_state_changed\") {\n");
      out.write("						console.debug(\"ice connection state changed to \" + description.state);\n");
      out.write("						if (description.state == \"connected\" || description.state == \"completed\") {\n");
      out.write("							//it means the ice connection has been established\n");
      out.write("							iceConnected = true;\n");
      out.write("						}\n");
      out.write("					}\n");
      out.write("					else if(info == \"resolutionChangeInfo\"){\n");
      out.write("					console.log(\"Resolution is changed to \"+description[\"streamHeight\"]);\n");
      out.write("					let getVideo = document.getElementById(\"remoteVideo\");\n");
      out.write("					let overlay = document.getElementById('video-overlay');\n");
      out.write("					getVideo.pause();\n");
      out.write("					overlay.style.display = \"block\";\n");
      out.write("					setTimeout(function(){ getVideo.play();overlay.style.display = \"none\";}, 2000);\n");
      out.write("			}\n");
      out.write("\n");
      out.write("				},\n");
      out.write("				callbackError: function (error) {\n");
      out.write("					//some of the possible errors, NotFoundError, SecurityError,PermissionDeniedError\n");
      out.write("\n");
      out.write("					console.log(\"error callback: \" + JSON.stringify(error));\n");
      out.write("\n");
      out.write("					if (error == \"no_stream_exist\") {\n");
      out.write("\n");
      out.write("						if (typeof noStreamCallback != \"undefined\") {\n");
      out.write("							noStreamCallback();\n");
      out.write("						}\n");
      out.write("					}\n");
      out.write("					if (error == \"notSetRemoteDescription\") {\n");
      out.write("						/*\n");
      out.write("						* If getting codec incompatible or remote description error, it will redirect HLS player.\n");
      out.write("						*/\n");
      out.write("						tryToPlay(streamId, token, hlsExtension, subscriberId, subscriberCode, hlsNoStreamCallback);\n");
      out.write("\n");
      out.write("					}\n");
      out.write("				}\n");
      out.write("			});\n");
      out.write("		}\n");
      out.write("\n");
      out.write("		function main() {\n");
      out.write("\n");
      out.write("			if (typeof streamId != \"undefined\") {\n");
      out.write("\n");
      out.write("				if (streamId.startsWith(streamsFolder)) {\n");
      out.write("					/*\n");
      out.write("					* If streamId starts with streams, it's hls or mp4 file to be played\n");
      out.write("					*/\n");
      out.write("					var lastIndexOfDot = streamId.lastIndexOf(\".\")\n");
      out.write("					var streamPath = streamId.substring(streamsFolder.length + 1, lastIndexOfDot);\n");
      out.write("					var extension = streamId.substring(lastIndexOfDot + 1);\n");
      out.write("					initializePlayer(streamPath, extension, token);\n");
      out.write("				}\n");
      out.write("				else {\n");
      out.write("					/*\n");
      out.write("					 * Check that which one is in the first order\n");
      out.write("					*/\n");
      out.write("					if (playOrder[0] == \"webrtc\") {\n");
      out.write("						initializeWebRTCPlayer(streamId, token, subscriberId, subscriberCode, webrtcNoStreamCallback);\n");
      out.write("					}\n");
      out.write("					else if (playOrder[0] == \"hls\") {\n");
      out.write("						tryToPlay(streamId, token, hlsExtension, subscriberId, subscriberCode, hlsNoStreamCallback);\n");
      out.write("					}\n");
      out.write("					else if (playOrder[0] == \"vod\") {\n");
      out.write("						tryToVODPlay(streamId, token, subscriberId, subscriberCode, vodNoStreamCallback, playType);\n");
      out.write("					}\n");
      out.write("					else if (playOrder[0] == \"dash\") {\n");
      out.write("						tryToPlay(streamId, token, dashExtension, subscriberId, subscriberCode, dashNoStreamCallback);\n");
      out.write("					}\n");
      out.write("					else {\n");
      out.write("						alert(\"Unsupported play order requested. Supported formats are webrtc and hls. Use something like playOrder=webrtc,hls\");\n");
      out.write("					}\n");
      out.write("				}\n");
      out.write("			}\n");
      out.write("			else {\n");
      out.write("				alert(\"No stream specified. Please add ?id={STREAM_ID}  to the url\");\n");
      out.write("			}\n");
      out.write("		}\n");
      out.write("\n");
      out.write("\n");
      out.write("		main();\n");
      out.write("	</script>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
