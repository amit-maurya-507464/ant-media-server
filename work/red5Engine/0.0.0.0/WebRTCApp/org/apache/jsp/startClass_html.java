/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.73
 * Generated at: 2022-05-15 13:27:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class startClass_html extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<title>Start Online Class</title>\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<link rel=\"stylesheet\" href=\"css/external/bootstrap4/bootstrap.min.css\">\n");
      out.write("<link rel=\"stylesheet\" href=\"css/common.css\" />\n");
      out.write("<script src=\"js/external/adapter-latest.js\"></script>\n");
      out.write("\n");
      out.write("<style>\n");
      out.write("video {\n");
      out.write("	width: 100%;\n");
      out.write("	max-width: 640px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* Everything but the jumbotron gets side spacing for mobile first views */\n");
      out.write(".header, .marketing, .footer {\n");
      out.write("	padding: 15px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* Custom page header */\n");
      out.write(".header {\n");
      out.write("	padding-bottom: 20px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* Customize container */\n");
      out.write("@media ( min-width : 768px) {\n");
      out.write("	.container {\n");
      out.write("		max-width: 730px;\n");
      out.write("	}\n");
      out.write("}\n");
      out.write("\n");
      out.write(".container-narrow>hr {\n");
      out.write("	margin: 30px 0;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* Main marketing message and sign up button */\n");
      out.write(".jumbotron {\n");
      out.write("	text-align: center;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* Responsive: Portrait tablets and up */\n");
      out.write("@media screen and (min-width: 768px) {\n");
      out.write("	/* Remove the padding we set earlier */\n");
      out.write("	.header, .marketing, .footer {\n");
      out.write("		padding-right: 0;\n");
      out.write("		padding-left: 0;\n");
      out.write("	}\n");
      out.write("}\n");
      out.write(".options {\n");
      out.write("		display:none;\n");
      out.write("	}\n");
      out.write(".message_area {\n");
      out.write("	height: 300px;\n");
      out.write("	overflow-y: auto;\n");
      out.write("	border-style: groove;\n");
      out.write("	border-width: thin;\n");
      out.write("	background-color: white;\n");
      out.write("}\n");
      out.write("\n");
      out.write("footer {\n");
      out.write("        position: fixed;\n");
      out.write("        bottom: 0;\n");
      out.write("        left: 0;\n");
      out.write("        width: 100%;\n");
      out.write("        text-align: center;\n");
      out.write("        background-color: #292c2f;\n");
      out.write("        color: white;\n");
      out.write("}\n");
      out.write("\n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<body style=\"background-color: rgba(42, 78, 133, 0.925);\">\n");
      out.write("	<div class=\"container\">\n");
      out.write("		<!-- <div class=\"header clearfix\">\n");
      out.write("			<div class=\"row\">\n");
      out.write("				<h3 class=\"col text-muted\">WebRTC Publish</h3>\n");
      out.write("				<nav class=\"col align-self-center\">\n");
      out.write("					<ul class=\"nav float-right\">\n");
      out.write("						<li><a href=\"http://antmedia.io\">Contact</a></li>\n");
      out.write("					</ul>\n");
      out.write("				</nav>\n");
      out.write("			</div>\n");
      out.write("		</div> -->\n");
      out.write("\n");
      out.write("		<div class=\"jumbotron\">\n");
      out.write("			<div class=\"col-sm-12 form-group\">\n");
      out.write("				<video id=\"localVideo\"  autoplay muted controls playsinline></video>\n");
      out.write("			</div>\n");
      out.write("\n");
      out.write("			<div class=\"form-group col-sm-12 text-left\">\n");
      out.write("				<input type=\"text\" class=\"form-control\"\n");
      out.write("						id=\"streamId\" name=\"streamIdTextBox\" placeholder=\"Enter Class Id\">\n");
      out.write("			</div>\n");
      out.write("			<div class=\"col-sm-12 text-right\">\n");
      out.write("				<button type=\"button\" id=\"options\" class=\"btn btn-outline-primary btn-sm\" >Options</button>\n");
      out.write("			</div>\n");
      out.write("			<div class=\"form-group col-sm-12 text-left options\">\n");
      out.write("\n");
      out.write("				<div style=\"margin-top:10px;\" class=\"form-group\">Microphone Gain: <br><input type=range id=\"volume_change_input\" min=0 max=1 value=1 step=0.01></div>\n");
      out.write("				\n");
      out.write("				<label class=\" mr-2\" for=\"inlineFormCustomSelectPref\">Max Video Bitrate(Kbps):</label>\n");
      out.write("				<div class=\"form-inline\">\n");
      out.write("					<input type=\"text\" class=\"form-control  mr-sm-2\"\n");
      out.write("							id=\"maxBandwidthTextBox\" name=\"maxBandwidthTextBox\" >\n");
      out.write("				  \n");
      out.write("					<button type=\"button\" class=\"btn btn-outline-primary btn-sm\" id=\"max_bandwidth_apply\" >Apply</button>\n");
      out.write("				</div>\n");
      out.write("				<div class=\"dropdown-divider\"></div>\n");
      out.write("				<legend class=\"col-form-label video-source-legend\">Video Source</legend>\n");
      out.write("					<a id=\"browser_screen_share_doesnt_support\" href=\"https://caniuse.com/#search=getDisplayMedia\">Your browser doesn't support screen share. You can see supported browsers in this link </a>\n");
      out.write("				<div class=\"dropdown-divider\"></div>\n");
      out.write("				<legend class=\"col-form-label audio-source-legend\">Audio Source</legend>\n");
      out.write("				\n");
      out.write("			</div>	\n");
      out.write("			<div class=\"dropdown-divider\"></div>\n");
      out.write("			<div class=\"form-group col-sm-12 text-left options\">\n");
      out.write("				<label>Data Channel Messages</label>\n");
      out.write("				<div id=\"all-messages\" class=\"message_area\"></div>\n");
      out.write("				<div class=\"form-row\">\n");
      out.write("					<div class=\"form-group col-sm-8\">\n");
      out.write("						<input type=\"text\" class=\"form-control\" id=\"dataTextbox\" placeholder=\"Write your message to send players\">\n");
      out.write("					</div>\n");
      out.write("					<div class=\"form-group col-sm-2\">\n");
      out.write("					<button type=\"button\" id=\"send\" class=\"btn btn-outline-primary btn-block\">Send</button>\n");
      out.write("					</div>\n");
      out.write("					<div class=\"form-group col-sm-2\">\n");
      out.write("						<button id=\"send-image-button\" type=\"button\" class=\"btn btn-outline-primary btn-block\">\n");
      out.write("							Image\n");
      out.write("						</button>\n");
      out.write("						<input id=\"file-input\" type=\"file\" name=\"name\" accept=\"image/x-png,image/gif,image/jpeg\" style=\"display: none\" />\n");
      out.write("					</div>\n");
      out.write("				</div>\n");
      out.write("			</div>\n");
      out.write("					\n");
      out.write("\n");
      out.write("				<div class=\"form-group\">	\n");
      out.write("					<button class=\"btn btn-primary\" disabled\n");
      out.write("					id=\"start_publish_button\">Start Class</button>\n");
      out.write("					<button class=\"btn btn-primary\" disabled\n");
      out.write("					id=\"stop_publish_button\">Stop Class</button>\n");
      out.write("				</div>			\n");
      out.write("\n");
      out.write("				<span class=\"badge badge-success\" id=\"broadcastingInfo\" style=\"font-size:14px;display:none\"\n");
      out.write("							style=\"display: none\">Publishing</span>\n");
      out.write("				<div class=\"dropdown-divider\"></div>	\n");
      out.write("				<!-- <div class=\"header clearfix\">\n");
      out.write("					<div class=\"row\">\n");
      out.write("						<h3 class=\"col text-muted\">WebRTC Publish</h3>\n");
      out.write("						<nav class=\"col align-self-center\">\n");
      out.write("							<ul class=\"nav float-right\">\n");
      out.write("								<li><a href=\"http://antmedia.io\">Contact</a></li>\n");
      out.write("							</ul>\n");
      out.write("						</nav>\n");
      out.write("					</div>\n");
      out.write("				</div> -->\n");
      out.write("				<!-- <span style=\"font-size:16px;display:block;padding:10px;\"><a href=\"samples.html\">WebRTC Sample List</a></span> -->\n");
      out.write("				<div class=\"col-sm-10 offset-sm-1\" id=\"stats_panel\" style=\"display: none;\">\n");
      out.write("					<div class=\"row text-muted text-left\">\n");
      out.write("					  <div class=\"col-sm-6\">\n");
      out.write("						<small>\n");
      out.write("						 <div id=\"average_bit_rate_container\">Average Bitrate(Kbps): <span id=\"average_bit_rate\"></span></div>\n");
      out.write("						 <div id=\"latest_bit_rate_container\">Latest Bitrate(Kbps): <span id=\"latest_bit_rate\"></span></div>\n");
      out.write("						 <div id=\"packet_lost_container\">PacketsLost: <span id=\"packet_lost_text\"></span></div>\n");
      out.write("						 <div id=\"jitter_text_container\">Jitter(Secs): <span id=\"jitter_text\"></span></div>\n");
      out.write("						 <div>Audio Level: <span id=\"audio_level_text\"></span> <meter id=\"audio_level_text_container\" high=\"0.25\" max=\"1\" value=\"0\"></meter></div>\n");
      out.write("						</small>\n");
      out.write("					  </div>\n");
      out.write("					  <div class=\"col-sm-6\">\n");
      out.write("						<small>\n");
      out.write("						<div id=\"round_trip_time_container\">Round Trip Time(Secs): <span id=\"round_trip_time\"></span></div>\n");
      out.write("						<div id=\"source_resolution_container\">Source WidthxHeight: <span id=\"source_width\"></span> x <span id=\"source_height\"></span></div>\n");
      out.write("						<div id=\"ongoing_resolution_container\">On-going WidthxHeight: <span id=\"ongoing_width\"></span> x <span id=\"ongoing_height\"></span></div>\n");
      out.write("						<div id=\"on_going_fps_container\">On-going FPS: <span id=\"on_going_fps\"></span></div>\n");
      out.write("						\n");
      out.write("						</small>\n");
      out.write("					  </div>\n");
      out.write("					</div>\n");
      out.write("				  </div>\n");
      out.write("				\n");
      out.write("\n");
      out.write("		</div>\n");
      out.write("		<!-- <footer class=\"footer text-center\">\n");
      out.write("			<p><a href=\"http://antmedia.io\">Ant Media Server</a></p>\n");
      out.write("		</footer> -->\n");
      out.write("		<footer>\n");
      out.write("			<br>\n");
      out.write("			<p>Developed By:  Amit Maurya  &copy;  2022<br>\n");
      out.write("		\n");
      out.write("		</footer>\n");
      out.write("	</div>\n");
      out.write("	<script src=\"js/external/jquery-3.4.1.min.js\"  crossorigin=\"anonymous\"></script>\n");
      out.write("	<script src=\"js/external/popper.min.js\" crossorigin=\"anonymous\"></script>\n");
      out.write("	<script src=\"js/external/bootstrap.min.js\"  crossorigin=\"anonymous\"></script>	\n");
      out.write("</body>\n");
      out.write("<script type=\"module\" lang=\"javascript\">\n");
      out.write("	import {WebRTCAdaptor} from \"./js/webrtc_adaptor.js\"\n");
      out.write("    import {getUrlParameter} from \"./js/fetch.stream.js\" \n");
      out.write("    import {SoundMeter} from \"./js/soundmeter.js\" \n");
      out.write("	var debug = getUrlParameter(\"debug\");\n");
      out.write("	  if(debug == null) {\n");
      out.write("		debug = false;\n");
      out.write("		}\n");
      out.write("\n");
      out.write("    function init () {\n");
      out.write("	  var id = getUrlParameter(\"id\");\n");
      out.write("	  if(typeof id != \"undefined\") {\n");
      out.write("		$(\"#streamId\").val(id);\n");
      out.write("	  }\n");
      out.write("	  else {\n");
      out.write("		id = getUrlParameter(\"name\");\n");
      out.write("		if (typeof id != \"undefined\") {\n");
      out.write("			$(\"#streamId\").val(id);\n");
      out.write("		} \n");
      out.write("		else {\n");
      out.write("			$(\"#streamId\").val(\"stream1\");\n");
      out.write("		}\n");
      out.write("	  }\n");
      out.write("	  \n");
      out.write("	  $(\"#maxBandwidthTextBox\").val(maxVideoBitrateKbps);\n");
      out.write("	  $(\"#max_bandwidth_apply\").click(function() {\n");
      out.write("		var bitrateBoxValue = $(\"#maxBandwidthTextBox\").val();\n");
      out.write("		if(bitrateBoxValue == \"unlimited\" || bitrateBoxValue == NaN){\n");
      out.write("			maxVideoBitrateKbps = \"unlimited\"\n");
      out.write("			console.log(\"input bitrate: \" + maxVideoBitrateKbps);\n");
      out.write("			webRTCAdaptor.changeBandwidth(maxVideoBitrateKbps,  $(\"#streamId\").val());\n");
      out.write("		}\n");
      out.write("		else{\n");
      out.write("			var bitrate = parseInt(bitrateBoxValue);\n");
      out.write("			if (bitrate == NaN || bitrate < 100 || bitrate > 2500) {\n");
      out.write("				maxVideoBitrateKbps = 900;\n");
      out.write("			}\n");
      out.write("			else {\n");
      out.write("				maxVideoBitrateKbps = bitrate;\n");
      out.write("			}\n");
      out.write("			console.log(\"input bitrate: \" + maxVideoBitrateKbps);\n");
      out.write("			$(\"#maxBandwidthTextBox\").val(maxVideoBitrateKbps)\n");
      out.write("			if (webRTCAdaptor != null) {\n");
      out.write("				webRTCAdaptor.changeBandwidth(maxVideoBitrateKbps,  $(\"#streamId\").val());\n");
      out.write("			}\n");
      out.write("		}\n");
      out.write("	  })\n");
      out.write("    }\n");
      out.write("	$(function() {\n");
      out.write("		init();\n");
      out.write("	});\n");
      out.write("\n");
      out.write("	var maxVideoBitrateKbps = 900;\n");
      out.write("	var subscriberId = getUrlParameter(\"subscriberId\");\n");
      out.write("	var subscriberCode = getUrlParameter(\"subscriberCode\");\n");
      out.write("	var streamName = getUrlParameter(\"streamName\");\n");
      out.write("	var mainTrack = getUrlParameter(\"mainTrack\");\n");
      out.write("	\n");
      out.write("	//TODO: Migrate these methods to Jquery\n");
      out.write("	var start_publish_button = document.getElementById(\"start_publish_button\");\n");
      out.write("	start_publish_button.addEventListener(\"click\", startPublishing, false);\n");
      out.write("	var stop_publish_button = document.getElementById(\"stop_publish_button\");\n");
      out.write("	stop_publish_button.addEventListener(\"click\", stopPublishing, false);\n");
      out.write("	var options = document.getElementById(\"options\");\n");
      out.write("	options.addEventListener(\"click\", toggleOptions, false);\n");
      out.write("	var send = document.getElementById(\"send\");\n");
      out.write("	send.addEventListener(\"click\", sendData, false);\n");
      out.write("	\n");
      out.write("	document.getElementById(\"streamId\").defaultValue = \"Goofy\"\n");
      out.write("	var streamIdBox = document.getElementById(\"streamId\");\n");
      out.write("	streamIdBox.value = \"stream1\";\n");
      out.write("	\n");
      out.write("	/**\n");
      out.write("	 * If publishing stops for any reason, it tries to republish again.\n");
      out.write("	 */\n");
      out.write("	var autoRepublishEnabled = true;\n");
      out.write("	/**\n");
      out.write("	 * Timer job that checks the WebRTC connection \n");
      out.write("	 */\n");
      out.write("	var autoRepublishIntervalJob = null;\n");
      out.write("	\n");
      out.write("	var streamId;\n");
      out.write("	\n");
      out.write("	var token = getUrlParameter(\"token\");\n");
      out.write("	\n");
      out.write("	// It should be true\n");
      out.write("	var rtmpForward = getUrlParameter(\"rtmpForward\");\n");
      out.write("\n");
      out.write("	var volume_change_input = document.getElementById(\"volume_change_input\");\n");
      out.write("	volume_change_input.addEventListener(\"change\", changeVolume);\n");
      out.write("\n");
      out.write("	function changeVolume(){\n");
      out.write("	/**\n");
      out.write("   	* Change the gain levels on the input selector.\n");
      out.write("   	*/\n");
      out.write("   		if(document.getElementById('volume_change_input') != null){\n");
      out.write("   			webRTCAdaptor.currentVolume = this.value;\n");
      out.write("        	if(webRTCAdaptor.soundOriginGainNode != null){\n");
      out.write("        		webRTCAdaptor.soundOriginGainNode.gain.value = this.value; // Any number between 0 and 1.\n");
      out.write("        	}\n");
      out.write("\n");
      out.write("       		if(webRTCAdaptor.secondStreamGainNode != null){\n");
      out.write("       			webRTCAdaptor.secondStreamGainNode.gain.value = this.value; // Any number between 0 and 1.\n");
      out.write("       		}\n");
      out.write("   		}\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    let meterRefresh = null;\n");
      out.write("\n");
      out.write("    const instantMeter = document.querySelector('#audio_level_text_container');\n");
      out.write("    const instantValueDisplay = document.querySelector('#audio_level_text');\n");
      out.write("\n");
      out.write("    function enableAudioLevel() {\n");
      out.write("  	// Put variables in global scope to make them available to the\n");
      out.write("  	// browser console.\n");
      out.write("  	window.stream = webRTCAdaptor.localStream;\n");
      out.write("  	const soundMeter = window.soundMeter = new SoundMeter(webRTCAdaptor.audioContext);\n");
      out.write("  	soundMeter.connectToSource(stream, function(e) {\n");
      out.write("    if (e) {\n");
      out.write("    	alert(e);\n");
      out.write("      	return;\n");
      out.write("    }\n");
      out.write("    meterRefresh = setInterval(() => {\n");
      out.write("    	instantMeter.value = instantValueDisplay.innerText = soundMeter.instant.toFixed(2);\n");
      out.write("    }, 200);\n");
      out.write("	});\n");
      out.write("	}\n");
      out.write("\n");
      out.write("	var file_input = document.getElementById(\"file-input\");\n");
      out.write("	file_input.addEventListener(\"change\", send_image);\n");
      out.write("\n");
      out.write("	var connect_channel_button = document.getElementById(\"send-image-button\");\n");
      out.write("    connect_channel_button.addEventListener(\"click\", ()=>file_input.click());\n");
      out.write("\n");
      out.write("	function send_image() {\n");
      out.write("      var imageURL = file_input.files[0];\n");
      out.write("\n");
      out.write("      var reader = new FileReader();\n");
      out.write("      reader.onload = function (e) {\n");
      out.write("        var arrayBuffer = this.result;\n");
      out.write("        var bytes = new Uint8Array(arrayBuffer);\n");
      out.write("        var blob = new Blob([bytes.buffer]);\n");
      out.write("        var urlCreator = window.URL || window.webkitURL;\n");
      out.write("        var imageBlobUrl = urlCreator.createObjectURL(blob);\n");
      out.write("\n");
      out.write("		$('<img src =' + imageBlobUrl +' style=\"width:100px;\"><br>').appendTo($(\"#all-messages\"));\n");
      out.write("        sendBinaryData(arrayBuffer);\n");
      out.write("\n");
      out.write("      };\n");
      out.write("\n");
      out.write("      reader.readAsArrayBuffer(imageURL);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("	function sendBinaryData(data) {\n");
      out.write("      try {\n");
      out.write("        var iceState = webRTCAdaptor.iceConnectionState(streamIdBox.value);\n");
      out.write("        if (\n");
      out.write("          iceState != null &&\n");
      out.write("          iceState != \"failed\" &&\n");
      out.write("          iceState != \"disconnected\"\n");
      out.write("        ) {\n");
      out.write("          webRTCAdaptor.sendData(streamIdBox.value, data);\n");
      out.write("        } else {\n");
      out.write("          alert(\"WebRTC connection is not active. Please click start first\");\n");
      out.write("        }\n");
      out.write("      } catch (exception) {\n");
      out.write("        console.error(exception);\n");
      out.write("        alert(\n");
      out.write("          \"Message cannot be sent. Make sure you've enabled data channel on server web panel\"\n");
      out.write("        );\n");
      out.write("      }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("	function handleImageData(data) {\n");
      out.write("        var bytes = new Uint8Array(data);\n");
      out.write("        var blob = new Blob([bytes.buffer]);\n");
      out.write("        var urlCreator = window.URL || window.webkitURL;\n");
      out.write("        var imageUrl = urlCreator.createObjectURL(blob);\n");
      out.write("\n");
      out.write("		$('<img src =' + imageUrl +' style=\"width:100px;\"><br>').appendTo($(\"#all-messages\"));\n");
      out.write("    }\n");
      out.write("\n");
      out.write("	function startPublishing() {\n");
      out.write("		streamId = streamIdBox.value;\n");
      out.write("		webRTCAdaptor.publish(streamId, token, subscriberId, subscriberCode, streamName, mainTrack);\n");
      out.write("	}\n");
      out.write("\n");
      out.write("	function stopPublishing() {\n");
      out.write("		if (autoRepublishIntervalJob != null) {\n");
      out.write("			clearInterval(autoRepublishIntervalJob);\n");
      out.write("			autoRepublishIntervalJob = null;\n");
      out.write("		}\n");
      out.write("		webRTCAdaptor.stop(streamId);\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("  	function switchVideoMode(chbx) {\n");
      out.write("  		if(chbx.value == \"screen\") {\n");
      out.write("			  //webRTCAdaptor.switchDesktopWithMicAudio(streamId);\n");
      out.write("			  webRTCAdaptor.switchDesktopCapture(streamId);\n");
      out.write("  		}\n");
      out.write("  		else if(chbx.value == \"screenwithcamera\"){\n");
      out.write("			webRTCAdaptor.switchDesktopCaptureWithCamera(streamId);\n");
      out.write("		}\n");
      out.write("		else {\n");
      out.write("  			webRTCAdaptor.switchVideoCameraCapture(streamId, chbx.value);\n");
      out.write("  		}\n");
      out.write("	}\n");
      out.write("  	\n");
      out.write("	function switchAudioMode(chbx) {\n");
      out.write("		webRTCAdaptor.switchAudioInputSource(streamId, chbx.value);\n");
      out.write("	}\n");
      out.write("\n");
      out.write("	function getCameraRadioButton(deviceName, deviceId) {\n");
      out.write("		return \"<div class=\\\"form-check form-check-inline\\\">\" + 	\n");
      out.write("							\"<input class=\\\"form-check-input video-source\\\" name=\\\"videoSource\\\" type=\\\"radio\\\" value=\\\"\" + deviceId + \"\\\" id=\\\"\" + deviceId + \"\\\">\" +\n");
      out.write("							\"<label class=\\\"form-check-label font-weight-light\\\" name=\\\"videoSource\\\" for=\\\"\" + deviceId + \"\\\" style=\\\"font-weight:normal\\\">\" +\n");
      out.write("								deviceName +\n");
      out.write("							\"</label>\" +		\n");
      out.write("						   \"</div>\";\n");
      out.write("	}\n");
      out.write("	function getScreenButton(){\n");
      out.write("		return \"<div class=\\\"form-check form-check-inline\\\">\" +\n");
      out.write("					\"<input class=\\\"form-check-input video-source\\\" name=\\\"videoSource\\\" type=\\\"radio\\\" value=\\\"screen\\\" id=\\\"screen_share_checkbox\\\">\" +\n");
      out.write("					\"<label class=\\\"form-check-label font-weight-light\\\" name=\\\"videoSource\\\" for=\\\"screen_share_checkbox\\\" style=\\\"font-weight:normal\\\">\" +\n");
      out.write("							\"Screen\" +\n");
      out.write("					\"</label>\" +\n");
      out.write("				\"</div>\"\n");
      out.write("	}\n");
      out.write("	function getScreenWithCamButton(){\n");
      out.write("		return \"<div class=\\\"form-check form-check-inline\\\">\" +\n");
      out.write("					\"<input class=\\\"form-check-input video-source\\\" name=\\\"videoSource\\\" type=\\\"radio\\\" value=\\\"screenwithcamera\\\" id=\\\"screen_share_with_camera_checkbox\\\">\" +\n");
      out.write("					\"<label class=\\\"form-check-label font-weight-light\\\" name=\\\"videoSource\\\" for=\\\"screen_share_with_camera_checkbox\\\" style=\\\"font-weight:normal\\\">\" +\n");
      out.write("							\"Screen with Camera\" +\n");
      out.write("					\"</label>\" +\n");
      out.write("				\"</div>\"\n");
      out.write("	}\n");
      out.write("	function getAudioRadioButton(deviceName, deviceId) {\n");
      out.write("		return \"<div class=\\\"form-check form-check-inline\\\">\" + 	\n");
      out.write("							\"<input class=\\\"form-check-input audio-source\\\" name=\\\"audioDeviceSource\\\" type=\\\"radio\\\" value=\\\"\" + deviceId + \"\\\" id=\\\"\" + deviceId + \"\\\">\" +\n");
      out.write("							\"<label class=\\\"form-check-label font-weight-light\\\" name=\\\"audioDeviceSource\\\" for=\\\"\" + deviceId + \"\\\" style=\\\"font-weight:normal\\\">\" +\n");
      out.write("								deviceName +\n");
      out.write("							\"</label>\" +		\n");
      out.write("						   \"</div>\";\n");
      out.write("	}\n");
      out.write("\n");
      out.write("	function toggleOptions() {\n");
      out.write("		$(\".options\").toggle();\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	function sendData() {\n");
      out.write("		try {\n");
      out.write("			var iceState = webRTCAdaptor.iceConnectionState(streamId);\n");
      out.write("            if (iceState != null && iceState != \"failed\" && iceState != \"disconnected\") {\n");
      out.write("            \n");
      out.write("				webRTCAdaptor.sendData($(\"#streamId\").val(), $(\"#dataTextbox\").val());\n");
      out.write("				$(\"#all-messages\").append(\"Sent: \" + $(\"#dataTextbox\").val() + \"<br>\");\n");
      out.write("				$(\"#dataTextbox\").val(\"\");\n");
      out.write("			}\n");
      out.write("			else {\n");
      out.write("				alert(\"WebRTC publishing is not active. Please click Start Publishing first\")\n");
      out.write("			}\n");
      out.write("		}\n");
      out.write("		catch (exception) {\n");
      out.write("			console.error(exception);\n");
      out.write("			alert(\"Message cannot be sent. Make sure you've enabled data channel on server web panel\");\n");
      out.write("		}\n");
      out.write("	}\n");
      out.write("	  \n");
      out.write("	\n");
      out.write("	function checkAndRepublishIfRequired() {\n");
      out.write("	 	var iceState = webRTCAdaptor.iceConnectionState(streamId);\n");
      out.write("		console.log(\"Ice state checked = \" + iceState);\n");
      out.write("\n");
      out.write("	  	if (iceState == null || iceState == \"failed\" || iceState == \"disconnected\"){\n");
      out.write("	  		webRTCAdaptor.stop(streamId);\n");
      out.write("	  		webRTCAdaptor.closePeerConnection(streamId);\n");
      out.write("	  		webRTCAdaptor.closeWebSocket();\n");
      out.write("	  		initWebRTCAdaptor(true, autoRepublishEnabled);\n");
      out.write("		  }	\n");
      out.write("	}\n");
      out.write("\n");
      out.write("    function startAnimation() {\n");
      out.write("\n");
      out.write("        $(\"#broadcastingInfo\").fadeIn(800, function () {\n");
      out.write("          $(\"#broadcastingInfo\").fadeOut(800, function () {\n");
      out.write("        		var state = webRTCAdaptor.signallingState(streamId);\n");
      out.write("            if (state != null && state != \"closed\") {\n");
      out.write("            	var iceState = webRTCAdaptor.iceConnectionState(streamId);\n");
      out.write("            	if (iceState != null && iceState != \"failed\" && iceState != \"disconnected\") {\n");
      out.write("              		startAnimation();\n");
      out.write("            	}\n");
      out.write("            }\n");
      out.write("          });\n");
      out.write("        });\n");
      out.write("      }\n");
      out.write("\n");
      out.write("	var pc_config = {\n");
      out.write("			'iceServers' : [ {\n");
      out.write("				'urls' : 'stun:stun1.l.google.com:19302'\n");
      out.write("			} ]\n");
      out.write("		};\n");
      out.write("	/* \n");
      out.write("	//sample turn configuration\n");
      out.write("	{\n");
      out.write("     var pc_config = {  iceServers: [\n");
      out.write("                    		{ \n");
      out.write(" 							  urls: \"\",\n");
      out.write("                      		  username: \"\",\n");
      out.write("                      	      credential: \"\",\n");
      out.write("                            }\n");
      out.write("                        ]\n");
      out.write("					};\n");
      out.write("    };\n");
      out.write("    */\n");
      out.write("\n");
      out.write("	var sdpConstraints = {\n");
      out.write("		OfferToReceiveAudio : false,\n");
      out.write("		OfferToReceiveVideo : false\n");
      out.write("	};\n");
      out.write("	\n");
      out.write("	var mediaConstraints = {\n");
      out.write("		video : true,\n");
      out.write("		audio : true\n");
      out.write("	};\n");
      out.write("\n");
      out.write("	var appName = location.pathname.substring(0, location.pathname.lastIndexOf(\"/\")+1);\n");
      out.write("	var path =  location.hostname + \":\" + location.port + appName + \"websocket?rtmpForward=\" + rtmpForward;\n");
      out.write("	var websocketURL =  \"ws://\" + path;\n");
      out.write("	\n");
      out.write("	if (location.protocol.startsWith(\"https\")) {\n");
      out.write("		websocketURL = \"wss://\" + path;\n");
      out.write("	}\n");
      out.write("\n");
      out.write("	var	webRTCAdaptor = null;\n");
      out.write("	var selectedRadio = null;\n");
      out.write("	var selectedAudio = null;\n");
      out.write("\n");
      out.write("	function initWebRTCAdaptor(publishImmediately, autoRepublishEnabled) \n");
      out.write("	{\n");
      out.write("		webRTCAdaptor = new WebRTCAdaptor({\n");
      out.write("				websocket_url : websocketURL,\n");
      out.write("				mediaConstraints : mediaConstraints,\n");
      out.write("				peerconnection_config : pc_config,\n");
      out.write("				sdp_constraints : sdpConstraints,\n");
      out.write("				localVideoId : \"localVideo\",\n");
      out.write("				debug:debug,\n");
      out.write("				bandwidth:maxVideoBitrateKbps,\n");
      out.write("				dataChannelEnabled : true,\n");
      out.write("				callback : (info, obj) => {\n");
      out.write("					if (info == \"initialized\") {\n");
      out.write("						console.log(\"initialized\");\n");
      out.write("						start_publish_button.disabled = false;\n");
      out.write("						stop_publish_button.disabled = true;\n");
      out.write("						if (publishImmediately) {\n");
      out.write("							webRTCAdaptor.publish(streamId, token, subscriberId, subscriberCode, streamName)\n");
      out.write("						}\n");
      out.write("						\n");
      out.write("					} else if (info == \"publish_started\") {\n");
      out.write("						//stream is being published\n");
      out.write("						console.log(\"publish started\");\n");
      out.write("						start_publish_button.disabled = true;\n");
      out.write("						stop_publish_button.disabled = false;\n");
      out.write("						startAnimation();\n");
      out.write("						if (autoRepublishEnabled && autoRepublishIntervalJob == null) \n");
      out.write("						{\n");
      out.write("							autoRepublishIntervalJob = setInterval(() => {\n");
      out.write("								checkAndRepublishIfRequired();\n");
      out.write("							}, 3000);\n");
      out.write("						}\n");
      out.write("						webRTCAdaptor.enableStats(obj.streamId);\n");
      out.write("						enableAudioLevel();\n");
      out.write("					} else if (info == \"publish_finished\") {\n");
      out.write("						//stream is being finished\n");
      out.write("						console.log(\"publish finished\");\n");
      out.write("						start_publish_button.disabled = false;\n");
      out.write("						stop_publish_button.disabled = true;\n");
      out.write("						$(\"#stats_panel\").hide();\n");
      out.write("					}\n");
      out.write("					else if (info == \"browser_screen_share_supported\") {\n");
      out.write("						$(\".video-source\").prop(\"disabled\", false);\n");
      out.write("						\n");
      out.write("						console.log(\"browser screen share supported\");\n");
      out.write("						browser_screen_share_doesnt_support.style.display = \"none\";\n");
      out.write("					}\n");
      out.write("					else if (info == \"screen_share_stopped\") {\n");
      out.write("						//choose the first video source. It may not be correct for all cases. \n");
      out.write("						$(\".video-source\").first().prop(\"checked\", true);	\n");
      out.write("						console.log(\"screen share stopped\");\n");
      out.write("					}\n");
      out.write("					else if (info == \"closed\") {\n");
      out.write("						//console.log(\"Connection closed\");\n");
      out.write("						if (typeof obj != \"undefined\") {\n");
      out.write("							console.log(\"Connecton closed: \" + JSON.stringify(obj));\n");
      out.write("						}\n");
      out.write("					}\n");
      out.write("					else if (info == \"pong\") {\n");
      out.write("						//ping/pong message are sent to and received from server to make the connection alive all the time\n");
      out.write("						//It's especially useful when load balancer or firewalls close the websocket connection due to inactivity\n");
      out.write("					}\n");
      out.write("					else if (info == \"refreshConnection\") {\n");
      out.write("						checkAndRepublishIfRequired();\n");
      out.write("					}\n");
      out.write("					else if (info == \"ice_connection_state_changed\") {\n");
      out.write("						console.log(\"iceConnectionState Changed: \",JSON.stringify(obj));\n");
      out.write("					}\n");
      out.write("					else if (info == \"updated_stats\") {\n");
      out.write("						//obj is the PeerStats which has fields\n");
      out.write("						 //averageOutgoingBitrate - kbits/sec\n");
      out.write("						//currentOutgoingBitrate - kbits/sec\n");
      out.write("						console.log(\"Average outgoing bitrate \" + obj.averageOutgoingBitrate + \" kbits/sec\"\n");
      out.write("								+ \" Current outgoing bitrate: \" + obj.currentOutgoingBitrate + \" kbits/sec\"\n");
      out.write("								+ \" video source width: \" + obj.resWidth + \" video source height: \" + obj.resHeight\n");
      out.write("								+ \"frame width: \" + obj.frameWidth + \" frame height: \" + obj.frameHeight\n");
      out.write("								+ \" video packetLost: \"  + obj.videoPacketsLost + \" audio packetsLost: \" + obj.audioPacketsLost\n");
      out.write("								+ \" video RTT: \" + obj.videoRoundTripTime + \" audio RTT: \" + obj.audioRoundTripTime \n");
      out.write("								+ \" video jitter: \" + obj.videoJitter + \" audio jitter: \" + obj.audioJitter);\n");
      out.write("\n");
      out.write("								\n");
      out.write("						$(\"#average_bit_rate\").text(obj.averageOutgoingBitrate);\n");
      out.write("						if (obj.averageOutgoingBitrate > 0)  {\n");
      out.write("							$(\"#average_bit_rate_container\").show();\n");
      out.write("						}\n");
      out.write("						else {\n");
      out.write("							$(\"#average_bit_rate_container\").hide();\n");
      out.write("						}\n");
      out.write("\n");
      out.write("						$(\"#latest_bit_rate\").text(obj.currentOutgoingBitrate);\n");
      out.write("						if (obj.currentOutgoingBitrate > 0) {\n");
      out.write("							$(\"#latest_bit_rate_container\").show();\n");
      out.write("						}\n");
      out.write("						else {\n");
      out.write("							$(\"#latest_bit_rate_container\").hide();\n");
      out.write("						}\n");
      out.write("						var packetLost = parseInt(obj.videoPacketsLost) + parseInt(obj.audioPacketsLost);	\n");
      out.write("						\n");
      out.write("						$(\"#packet_lost_text\").text(packetLost);\n");
      out.write("						if (packetLost > -1) {\n");
      out.write("							$(\"#packet_lost_container\").show();\n");
      out.write("						}\n");
      out.write("						else {\n");
      out.write("							$(\"#packet_lost_container\").hide();\n");
      out.write("						}\n");
      out.write("						var jitter = ((parseFloat(obj.videoJitter) + parseInt(obj.audioJitter)) / 2).toPrecision(3);\n");
      out.write("						$(\"#jitter_text\").text(jitter);\n");
      out.write("						if (jitter > 0) {\n");
      out.write("							$(\"#jitter_container\").show();\n");
      out.write("						}\n");
      out.write("						else {\n");
      out.write("							$(\"#jitter_container\").hide();\n");
      out.write("						}\n");
      out.write("					\n");
      out.write("						var rtt = ((parseFloat(obj.videoRoundTripTime) + parseFloat(obj.audioRoundTripTime)) / 2).toPrecision(3);\n");
      out.write("						$(\"#round_trip_time\").text(rtt);\n");
      out.write("						if (rtt > 0) {\n");
      out.write("							$(\"#round_trip_time_container\").show();\n");
      out.write("						}\n");
      out.write("						else {\n");
      out.write("							$(\"#round_trip_time_container\").hide();\n");
      out.write("						}\n");
      out.write("						\n");
      out.write("						$(\"#source_width\").text(obj.resWidth);\n");
      out.write("						$(\"#source_height\").text(obj.resHeight);\n");
      out.write("						if (obj.resWidth > 0 && obj.resHeight > 0) {\n");
      out.write("							$(\"#source_resolution_container\").show();\n");
      out.write("						}\n");
      out.write("						else {\n");
      out.write("							$(\"#source_resolution_container\").hide();\n");
      out.write("						}\n");
      out.write("\n");
      out.write("						$(\"#ongoing_width\").text(obj.frameWidth);\n");
      out.write("						$(\"#ongoing_height\").text(obj.frameHeight);	\n");
      out.write("						if (obj.frameWidth > 0 && obj.frameHeight > 0) {\n");
      out.write("							$(\"#ongoing_resolution_container\").show();\n");
      out.write("						}\n");
      out.write("						else {\n");
      out.write("							$(\"#ongoing_resolution_container\").hide();\n");
      out.write("						}\n");
      out.write("						\n");
      out.write("						$(\"#on_going_fps\").text(obj.currentFPS);\n");
      out.write("						if (obj.currentFPS > 0) {\n");
      out.write("							$(\"#on_going_fps_container\").show();\n");
      out.write("						}\n");
      out.write("						else {\n");
      out.write("							$(\"#on_going_fps_container\").hide();\n");
      out.write("						}\n");
      out.write("\n");
      out.write("						$(\"#stats_panel\").show();\n");
      out.write("	\n");
      out.write("					}\n");
      out.write("					else if (info == \"data_received\") {\n");
      out.write("						var data = obj.data;\n");
      out.write("						if (data instanceof ArrayBuffer) {\n");
      out.write("							handleImageData(data);\n");
      out.write("						}\n");
      out.write("						else {\n");
      out.write("							$(\"#all-messages\").append(\"Received: \" + data + \"<br>\");\n");
      out.write("						}\n");
      out.write("					}\n");
      out.write("					else if (info == \"available_devices\") {\n");
      out.write("						var videoHtmlContent = \"\";\n");
      out.write("						var audioHtmlContent = \"\";\n");
      out.write("						var devices = new Array();\n");
      out.write("				\n");
      out.write("						var i = 0;\n");
      out.write("						obj.forEach(function(device) {\n");
      out.write("							var label = device.label;\n");
      out.write("							var deviceId = device.deviceId;\n");
      out.write("							var devices = new Array();\n");
      out.write("\n");
      out.write("							devices.forEach(function(same){\n");
      out.write("								if (same == device.label){\n");
      out.write("									i += 1;\n");
      out.write("									label = device.label + \" - \" + i\n");
      out.write("									deviceId = device.deviceId + i\n");
      out.write("								}\n");
      out.write("							})\n");
      out.write("							if (device.kind == \"videoinput\") {\n");
      out.write("								videoHtmlContent += getCameraRadioButton(label, device.deviceId);\n");
      out.write("							}\n");
      out.write("							else if (device.kind == \"audioinput\"){\n");
      out.write("								audioHtmlContent += getAudioRadioButton(label, device.deviceId);\n");
      out.write("							}\n");
      out.write("							devices.push(device.label)\n");
      out.write("						}); \n");
      out.write("						$('[name=\"videoSource\"]').remove();\n");
      out.write("						$('[name=\"audioDeviceSource\"]').remove();\n");
      out.write("\n");
      out.write("						videoHtmlContent += getScreenButton();\n");
      out.write("						videoHtmlContent += getScreenWithCamButton();\n");
      out.write("\n");
      out.write("						$(videoHtmlContent).insertAfter(\".video-source-legend\");\n");
      out.write("						$(\".video-source\").first().prop(\"checked\", true);	\n");
      out.write("						\n");
      out.write("						$(audioHtmlContent).insertAfter(\".audio-source-legend\");\n");
      out.write("						$(\".audio-source\").first().prop(\"checked\", true);	\n");
      out.write("\n");
      out.write("						\n");
      out.write("						if (document.querySelector('input[name=\"videoSource\"]')) {\n");
      out.write("							document.querySelectorAll('input[name=\"videoSource\"]').forEach((elem) => {\n");
      out.write("								elem.addEventListener(\"change\", function(event) {\n");
      out.write("								var item = event.target;\n");
      out.write("								switchVideoMode(item)\n");
      out.write("								selectedRadio = item.value;\n");
      out.write("								});\n");
      out.write("  							});\n");
      out.write("						}\n");
      out.write("						if (document.querySelector('input[name=\"audioDeviceSource\"]')) {\n");
      out.write("							document.querySelectorAll('input[name=\"audioDeviceSource\"]').forEach((elem) => {\n");
      out.write("								elem.addEventListener(\"change\", function(event) {\n");
      out.write("								var item = event.target;\n");
      out.write("								switchAudioMode(item)\n");
      out.write("								selectedAudio = item.value;\n");
      out.write("								});\n");
      out.write("  							});\n");
      out.write("						}\n");
      out.write("						$(\":radio[value=\" + selectedRadio + \"]\").prop(\"checked\", true);\n");
      out.write("						$(\":radio[value=\" + selectedAudio + \"]\").prop(\"checked\", true);\n");
      out.write("					}\n");
      out.write("					else if(info == \"session_restored\"){\n");
      out.write("						start_publish_button.disabled = true;\n");
      out.write("						stop_publish_button.disabled = false;\n");
      out.write("						startAnimation();\n");
      out.write("						console.log(info + \"notification received\");\n");
      out.write("					}\n");
      out.write("					else {\n");
      out.write("						console.log( info + \" notification received\");\n");
      out.write("					}\n");
      out.write("				},\n");
      out.write("				callbackError : function(error, message) {\n");
      out.write("					//some of the possible errors, NotFoundError, SecurityError,PermissionDeniedError\n");
      out.write("	\n");
      out.write("					console.log(\"error callback: \" +  JSON.stringify(error));\n");
      out.write("					var errorMessage = JSON.stringify(error);\n");
      out.write("					if (typeof message != \"undefined\") {\n");
      out.write("						errorMessage = message;\n");
      out.write("					}\n");
      out.write("					var errorMessage = JSON.stringify(error);\n");
      out.write("					if (error.indexOf(\"NotFoundError\") != -1) {\n");
      out.write("						errorMessage = \"Camera or Mic are not found or not allowed in your device\";\n");
      out.write("					}\n");
      out.write("					else if (error.indexOf(\"NotReadableError\") != -1 || error.indexOf(\"TrackStartError\") != -1) {\n");
      out.write("						errorMessage = \"Camera or Mic is being used by some other process that does not let read the devices\";\n");
      out.write("					}\n");
      out.write("					else if(error.indexOf(\"OverconstrainedError\") != -1 || error.indexOf(\"ConstraintNotSatisfiedError\") != -1) {\n");
      out.write("						errorMessage = \"There is no device found that fits your video and audio constraints. You may change video and audio constraints\"\n");
      out.write("					}\n");
      out.write("					else if (error.indexOf(\"NotAllowedError\") != -1 || error.indexOf(\"PermissionDeniedError\") != -1) {\n");
      out.write("						errorMessage = \"You are not allowed to access camera and mic.\";\n");
      out.write("					}\n");
      out.write("					else if (error.indexOf(\"TypeError\") != -1) {\n");
      out.write("						errorMessage = \"Video/Audio is required\";\n");
      out.write("					}\n");
      out.write("					else if (error.indexOf(\"getUserMediaIsNotAllowed\") != -1){\n");
      out.write("						errorMessage = \"You are not allowed to reach devices from an insecure origin, please enable ssl\";\n");
      out.write("					}\n");
      out.write("					else if (error.indexOf(\"ScreenSharePermissionDenied\") != -1) {\n");
      out.write("						errorMessage = \"You are not allowed to access screen share\";\n");
      out.write("						$(\".video-source\").first().prop(\"checked\", true);						\n");
      out.write("					}\n");
      out.write("					else if (error.indexOf(\"WebSocketNotConnected\") != -1) {\n");
      out.write("						errorMessage = \"WebSocket Connection is disconnected.\";\n");
      out.write("					}\n");
      out.write("					alert(errorMessage);\n");
      out.write("				}\n");
      out.write("			});\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	//initialize the WebRTCAdaptor\n");
      out.write("	initWebRTCAdaptor(false, autoRepublishEnabled);\n");
      out.write("</script>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
