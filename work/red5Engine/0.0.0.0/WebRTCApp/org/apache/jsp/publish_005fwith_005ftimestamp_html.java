/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.73
 * Generated at: 2022-04-20 18:14:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class publish_005fwith_005ftimestamp_html extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<link rel=\"stylesheet\" href=\"css/external/bootstrap4/bootstrap.min.css\" />\n");
      out.write("\n");
      out.write("<script src=\"js/external/adapter-latest.js\"></script>\n");
      out.write("<script src=\"js/external/jquery-3.4.1.min.js\"></script>\n");
      out.write("<link rel=\"stylesheet\" href=\"css/common.css\" />\n");
      out.write("<style>\n");
      out.write("    video, canvas {\n");
      out.write("        width: 100%;\n");
      out.write("        max-width: 640px;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    /* Everything but the jumbotron gets side spacing for mobile first views */\n");
      out.write("    .header, .marketing, .footer {\n");
      out.write("        padding: 15px;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    /* Custom page header */\n");
      out.write("    .header {\n");
      out.write("        padding-bottom: 20px;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    /* Customize container */\n");
      out.write("    @media ( min-width : 768px) {\n");
      out.write("        .container {\n");
      out.write("            max-width: 730px;\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    .container-narrow>hr {\n");
      out.write("        margin: 30px 0;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    /* Main marketing message and sign up button */\n");
      out.write("    .jumbotron {\n");
      out.write("        text-align: center;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    /* Responsive: Portrait tablets and up */\n");
      out.write("    @media screen and (min-width: 768px) {\n");
      out.write("        /* Remove the padding we set earlier */\n");
      out.write("        .header, .marketing, .footer {\n");
      out.write("            padding-right: 0;\n");
      out.write("            padding-left: 0;\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("    .options {\n");
      out.write("            display:none;\n");
      out.write("        }\n");
      out.write("    \n");
      out.write("    </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("	<div class=\"container\">\n");
      out.write("\n");
      out.write("        <div class=\"header clearfix\">\n");
      out.write("			<div class=\"row\">\n");
      out.write("				<h3 class=\"col text-muted\">WebRTC Publish</h3>\n");
      out.write("				<nav class=\"col align-self-center\">\n");
      out.write("					<ul class=\"nav float-right\">\n");
      out.write("						<li><a href=\"http://antmedia.io\">Contact</a></li>\n");
      out.write("					</ul>\n");
      out.write("				</nav>\n");
      out.write("			</div>\n");
      out.write("		</div>\n");
      out.write("        <div class=\"jumbotron\">\n");
      out.write("            <div class=\"col-sm-12 form-group\">\n");
      out.write("                <canvas id=\"canvas\" ></canvas>\n");
      out.write("                <video id=\"localCameraView\" autoplay controls muted playsinline style=\"display: none;\"></video>\n");
      out.write("		\n");
      out.write("		\n");
      out.write("            </div>\n");
      out.write("\n");
      out.write("            <div class=\"form-group col-sm-12 text-left\">\n");
      out.write("				<input type=\"text\" class=\"form-control\"\n");
      out.write("						id=\"streamName\" name=\"streamIdTextBox\" placeholder=\"Type stream name\">\n");
      out.write("            </div>\n");
      out.write("            \n");
      out.write("            <div class=\"alert alert-warning\" role=\"alert\">\n");
      out.write("				Sychronize your device with a Network Time Server.\n");
      out.write("			</div>\n");
      out.write("\n");
      out.write("			<a style=\"display:block;margin:10px\" href=\"https://github.com/ant-media/Ant-Media-Server/wiki/How-to-Measure-E2E-Latency\" >Guide: How to Measure E2E Latency</a>\n");
      out.write("\n");
      out.write("\n");
      out.write("            <div class=\"form-group\">	\n");
      out.write("                <button class=\"btn btn-primary\" disabled\n");
      out.write("                id=\"start_publish_button\">Start Publishing</button>\n");
      out.write("                <button class=\"btn btn-primary\" disabled\n");
      out.write("                id=\"stop_publish_button\">Stop Publishing</button>\n");
      out.write("            </div>	\n");
      out.write("\n");
      out.write("            <span class=\"badge badge-success\" id=\"broadcastingInfo\" style=\"font-size:14px;display:none\"\n");
      out.write("							style=\"display: none\">Publishing</span>\n");
      out.write("        </div>\n");
      out.write("		<footer class=\"footer\">\n");
      out.write("			<p><a href=\"http://antmedia.io\">Ant Media Server Enterprise Edition</a></p>\n");
      out.write("		</footer>\n");
      out.write("\n");
      out.write("	</div>\n");
      out.write("</body>\n");
      out.write("<script type=\"module\" lang=\"javascript\">\n");
      out.write("    import {WebRTCAdaptor} from \"./js/webrtc_adaptor.js\"\n");
      out.write("    import {getUrlParameter} from \"./js/fetch.stream.js\" \n");
      out.write("	\n");
      out.write("     var canvas = document.getElementById('canvas');\n");
      out.write("     var localCameraView = null;\n");
      out.write("     function draw() \n");
      out.write("     {\n");
      out.write("      if (canvas.getContext && localCameraView != null) {\n");
      out.write("        var ctx = canvas.getContext('2d');\n");
      out.write("\n");
      out.write("        canvas.width = localCameraView.videoWidth;\n");
      out.write("        canvas.height = localCameraView.videoHeight;\n");
      out.write("\n");
      out.write("        ctx.drawImage(localCameraView, 0, 0, canvas.width, canvas.height);\n");
      out.write("\n");
      out.write("        ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n");
      out.write("        ctx.font = \"20px Arial\";\n");
      out.write("        var text = \"Publish: \" + Date.now();\n");
      out.write("        var textMetrics = ctx.measureText(text);\n");
      out.write("        ctx.fillRect(5, 20, textMetrics.width+ 10, 30);\n");
      out.write("        \n");
      out.write("        ctx.fillStyle = 'rgba(0, 0, 255, 1.0)';\n");
      out.write("        \n");
      out.write("        ctx.fillText(text, 10, 40);\n");
      out.write("      }\n");
      out.write("    }\n");
      out.write("\n");
      out.write(" \n");
      out.write("    //capture stream from canvas\n");
      out.write("    var localCanvasStream = canvas.captureStream(25);\n");
      out.write("\n");
      out.write("\n");
      out.write("	var token = getUrlParameter(\"token\");\n");
      out.write("\n");
      out.write("	var camera_checkbox = document.getElementById(\"camera_checkbox\");\n");
      out.write("	var screen_share_checkbox = document.getElementById(\"screen_share_checkbox\");\n");
      out.write("  	var screen_share_with_camera_checkbox = document.getElementById(\"screen_share_with_camera_checkbox\");\n");
      out.write("\n");
      out.write("	var start_publish_button = document.getElementById(\"start_publish_button\");\n");
      out.write("	\n");
      out.write("	var stop_publish_button = document.getElementById(\"stop_publish_button\");\n");
      out.write("	\n");
      out.write("	var install_extension_link = document.getElementById(\"install_chrome_extension_link\");\n");
      out.write("\n");
      out.write("	var streamNameBox = document.getElementById(\"streamName\");\n");
      out.write("	\n");
      out.write("	var streamId;\n");
      out.write("	\n");
      out.write("	\n");
      out.write("	var name = getUrlParameter(\"name\");\n");
      out.write("	if(name !== \"undefined\")\n");
      out.write("	{\n");
      out.write("		streamNameBox.value = name;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	// It should be true\n");
      out.write("	var rtmpForward = getUrlParameter(\"rtmpForward\");\n");
      out.write("\n");
      out.write("	function startPublishing() {\n");
      out.write("		streamId = streamNameBox.value;\n");
      out.write("		webRTCAdaptor.publish(streamId, token);\n");
      out.write("	}\n");
      out.write("\n");
      out.write("    start_publish_button.addEventListener(\"click\", startPublishing, false);\n");
      out.write("\n");
      out.write("	function stopPublishing() {\n");
      out.write("		webRTCAdaptor.stop(streamId);\n");
      out.write("	}\n");
      out.write("\n");
      out.write("    stop_publish_button.addEventListener(\"click\", stopPublishing, false);\n");
      out.write("	\n");
      out.write("\n");
      out.write("\n");
      out.write("    function startAnimation() {\n");
      out.write("\n");
      out.write("        $(\"#broadcastingInfo\").fadeIn(800, function () {\n");
      out.write("          $(\"#broadcastingInfo\").fadeOut(800, function () {\n");
      out.write("        	var state = webRTCAdaptor.signallingState(streamId);\n");
      out.write("            if (state != null && state != \"closed\") {\n");
      out.write("            	var iceState = webRTCAdaptor.iceConnectionState(streamId);\n");
      out.write("            	if (iceState != null && iceState != \"failed\" && iceState != \"disconnected\") {\n");
      out.write("              		startAnimation();\n");
      out.write("            	}\n");
      out.write("            }\n");
      out.write("          });\n");
      out.write("        });\n");
      out.write("      }\n");
      out.write("\n");
      out.write("	var pc_config = null;\n");
      out.write("\n");
      out.write("	var sdpConstraints = {\n");
      out.write("		OfferToReceiveAudio : false,\n");
      out.write("		OfferToReceiveVideo : false\n");
      out.write("\n");
      out.write("	};\n");
      out.write("	\n");
      out.write("	var mediaConstraints = {\n");
      out.write("		video : true,\n");
      out.write("		audio : true\n");
      out.write("	};\n");
      out.write("\n");
      out.write("	var appName = location.pathname.substring(0, location.pathname.lastIndexOf(\"/\")+1);\n");
      out.write("	var path =  location.hostname + \":\" + location.port + appName + \"websocket?rtmpForward=\" + rtmpForward;\n");
      out.write("	var websocketURL =  \"ws://\" + path;\n");
      out.write("	\n");
      out.write("	if (location.protocol.startsWith(\"https\")) {\n");
      out.write("		websocketURL = \"wss://\" + path;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	var webRTCAdaptor;\n");
      out.write("	function initWebRTCAdaptor(stream) {\n");
      out.write("		webRTCAdaptor = new WebRTCAdaptor({\n");
      out.write("			websocket_url : websocketURL,\n");
      out.write("			mediaConstraints : mediaConstraints,\n");
      out.write("			peerconnection_config : pc_config,\n");
      out.write("			sdp_constraints : sdpConstraints,\n");
      out.write("			localVideoId : \"localVideo\",\n");
      out.write("			localStream: stream,\n");
      out.write("			debug:true,\n");
      out.write("			callback : function(info, obj) {\n");
      out.write("				if (info == \"initialized\") {\n");
      out.write("					console.log(\"initialized\");\n");
      out.write("					start_publish_button.disabled = false;\n");
      out.write("					stop_publish_button.disabled = true;\n");
      out.write("				} else if (info == \"publish_started\") {\n");
      out.write("					//stream is being published\n");
      out.write("					console.log(\"publish started\");\n");
      out.write("					start_publish_button.disabled = true;\n");
      out.write("					stop_publish_button.disabled = false;\n");
      out.write("					startAnimation();\n");
      out.write("				} else if (info == \"publish_finished\") {\n");
      out.write("					//stream is being finished\n");
      out.write("					console.log(\"publish finished\");\n");
      out.write("					start_publish_button.disabled = false;\n");
      out.write("					stop_publish_button.disabled = true;\n");
      out.write("				}\n");
      out.write("				else if (info == \"browser_screen_share_supported\") {\n");
      out.write("				}\n");
      out.write("				else if (info == \"screen_share_stopped\") {\n");
      out.write("				}\n");
      out.write("				else if (info == \"closed\") {\n");
      out.write("					//console.log(\"Connection closed\");\n");
      out.write("					if (typeof obj != \"undefined\") {\n");
      out.write("						console.log(\"Connecton closed: \" + JSON.stringify(obj));\n");
      out.write("					}\n");
      out.write("				}\n");
      out.write("				else if (info == \"pong\") {\n");
      out.write("					//ping/pong message are sent to and received from server to make the connection alive all the time\n");
      out.write("					//It's especially useful when load balancer or firewalls close the websocket connection due to inactivity\n");
      out.write("				}\n");
      out.write("				else if (info == \"refreshConnection\") {\n");
      out.write("					startPublishing();\n");
      out.write("				}\n");
      out.write("				else if (info == \"ice_connection_state_changed\") {\n");
      out.write("					console.log(\"iceConnectionState Changed: \",JSON.stringify(obj));\n");
      out.write("				}\n");
      out.write("				else if (info == \"updated_stats\") {\n");
      out.write("					//obj is the PeerStats which has fields\n");
      out.write("					 //averageOutgoingBitrate - kbits/sec\n");
      out.write("					//currentOutgoingBitrate - kbits/sec\n");
      out.write("					console.log(\"Average outgoing bitrate \" + obj.averageOutgoingBitrate + \" kbits/sec\"\n");
      out.write("							+ \" Current outgoing bitrate: \" + obj.currentOutgoingBitrate + \" kbits/sec\");\n");
      out.write("\n");
      out.write("				}\n");
      out.write("			},\n");
      out.write("			callbackError : function(error, message) {\n");
      out.write("				//some of the possible errors, NotFoundError, SecurityError,PermissionDeniedError\n");
      out.write("\n");
      out.write("				console.log(\"error callback: \" +  JSON.stringify(error));\n");
      out.write("				var errorMessage = JSON.stringify(error);\n");
      out.write("				if (typeof message != \"undefined\") {\n");
      out.write("					errorMessage = message;\n");
      out.write("				}\n");
      out.write("				var errorMessage = JSON.stringify(error);\n");
      out.write("				if (error.indexOf(\"NotFoundError\") != -1) {\n");
      out.write("					errorMessage = \"Camera or Mic are not found or not allowed in your device\";\n");
      out.write("				}\n");
      out.write("				else if (error.indexOf(\"NotReadableError\") != -1 || error.indexOf(\"TrackStartError\") != -1) {\n");
      out.write("					errorMessage = \"Camera or Mic is being used by some other process that does not let read the devices\";\n");
      out.write("				}\n");
      out.write("				else if(error.indexOf(\"OverconstrainedError\") != -1 || error.indexOf(\"ConstraintNotSatisfiedError\") != -1) {\n");
      out.write("					errorMessage = \"There is no device found that fits your video and audio constraints. You may change video and audio constraints\"\n");
      out.write("				}\n");
      out.write("				else if (error.indexOf(\"NotAllowedError\") != -1 || error.indexOf(\"PermissionDeniedError\") != -1) {\n");
      out.write("					errorMessage = \"You are not allowed to access camera and mic.\";\n");
      out.write("				}\n");
      out.write("				else if (error.indexOf(\"TypeError\") != -1) {\n");
      out.write("					errorMessage = \"Video/Audio is required\";\n");
      out.write("				}\n");
      out.write("				else if (error.indexOf(\"ScreenSharePermissionDenied\") != -1) {\n");
      out.write("					errorMessage = \"You are not allowed to access screen share\";\n");
      out.write("					camera_checkbox.checked = true;\n");
      out.write("					screen_share_checkbox.checked = false;\n");
      out.write("					screen_share_with_camera_checkbox.checked = false;\n");
      out.write("				}\n");
      out.write("				else if (error.indexOf(\"WebSocketNotConnected\") != -1) {\n");
      out.write("					errorMessage = \"WebSocket Connection is disconnected.\";\n");
      out.write("				}\n");
      out.write("				alert(errorMessage);\n");
      out.write("			}\n");
      out.write("		});\n");
      out.write("	}\n");
      out.write("\n");
      out.write("\n");
      out.write("    $(function() \n");
      out.write("    {\n");
      out.write("		var id = getUrlParameter(\"id\");\n");
      out.write("        if(typeof id != \"undefined\") {\n");
      out.write("            $(\"#streamName\").val(id);\n");
      out.write("        }\n");
      out.write("        else {\n");
      out.write("            id = getUrlParameter(\"name\");\n");
      out.write("            if (typeof id != \"undefined\") {\n");
      out.write("                $(\"#streamName\").val(id);\n");
      out.write("            } \n");
      out.write("            else {\n");
      out.write("                $(\"#streamName\").val(\"stream1\");\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("       \n");
      out.write("\n");
      out.write("         //get audio with getUserMedia\n");
      out.write("        navigator.mediaDevices.getUserMedia({video: true, audio:true}).then(function (stream) {\n");
      out.write("            //add audio track to the localstream which is captured from canvas\n");
      out.write("            \n");
      out.write("            window.stream = stream;\n");
      out.write("            localCanvasStream.addTrack(stream.getAudioTracks()[0]);\n");
      out.write("           \n");
      out.write("            localCameraView = document.getElementById(\"localCameraView\");\n");
      out.write("            localCameraView.srcObject = stream;\n");
      out.write("            localCameraView.play();\n");
      out.write("\n");
      out.write("            //update canvas for every 40ms\n");
      out.write("            setInterval(function() { draw(); }, 40);\n");
      out.write("\n");
      out.write("            initWebRTCAdaptor(localCanvasStream);    	    \n");
      out.write("        });\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("    });\n");
      out.write("    window.localCanvasStream = localCanvasStream;\n");
      out.write("</script>\n");
      out.write("</html>\n");
      out.write("\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
